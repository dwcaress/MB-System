/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * BuilderXcessory Version 6.1.3.
 *
 * Identification: 
 */
module main_uil
version = 'V2.1'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-lGLw -lSgm -lXm -lXt -lGL -lXext -lX11 -lgen -lm")
!(BX) bx_info("c_cflags", "-Aa -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_information", "")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "false")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "mbnavedit")
!(BX) bx_info("c_class", "mbnavedit")
!(BX) bx_info("c_app_defaults", "mbnavedit", true)
!(BX) bx_info("c_utilities", "mbnavedit_util.c", true)
!(BX) bx_info("c_constants", "mbnavedit_creation.h", true)
!(BX) bx_info("c_callbacks", "mbnavedit_callbacks.c", true)
!(BX) bx_info("c_creation", "mbnavedit_creation.c", true)
!(BX) bx_info("c_main", "mbnavedit.c", true)
!(BX) bx_info("c_acinclude_m4", "acinclude.m4", false)
!(BX) bx_info("c_configure_in", "configure.in", false)
!(BX) bx_info("c_makefile_am", "Makefile.am", false)
!(BX) bx_info("c_cvsmake", "CVSMake", false)
!(BX) bx_info("c_makefile", "Makefile.org", true)
!(BX) bx_info("c_imakefile", "Imakefile", false)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("system_directory", "/opt/bx-6.1")
!(BX) bx_info("builder_version", "BuilderXcessory Version 6.1.3")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

procedure BxGlobalWidgetId;
identifier BXG_pushButton_end;
identifier BXG_pushButton_start;
identifier BXG_pushButton_file;
identifier BXG_pushButton_interpolaterepeats;
identifier BXG_pushButton_unflag;
identifier BXG_pushButton_flag;
identifier BXG_pushButton_controls_deletebadtimetag;
identifier BXG_pushButton_controls_timeinterpolation;
identifier BXG_toggleButton_org_sonardepth;
identifier BXG_toggleButton_sonardepth;
identifier BXG_pushButton_solution;
identifier BXG_toggleButton_dr_lat;
identifier BXG_toggleButton_dr_lon;
identifier BXG_toggleButton_org_time;
identifier BXG_toggleButton_time;
identifier BXG_pushButton_done;
identifier BXG_pushButton_forward;
identifier BXG_pushButton_reverse;
identifier BXG_toggleButton_vru;
identifier BXG_pushButton_revert;
identifier BXG_pushButton_interpolate;
identifier BXG_toggleButton_deselectall;
identifier BXG_toggleButton_selectall;
identifier BXG_toggleButton_deselect;
identifier BXG_toggleButton_select;
identifier BXG_toggleButton_pick;
identifier BXG_radioBox;
identifier BXG_pushButton_heading_cmg;
identifier BXG_toggleButton_show_cmg;
identifier BXG_toggleButton_org_heading;
identifier BXG_pushButton_speed_smg;
identifier BXG_toggleButton_show_smg;
identifier BXG_toggleButton_org_speed;
identifier BXG_toggleButton_org_lat;
identifier BXG_toggleButton_org_lon;
identifier BXG_toggleButton_speed;
identifier BXG_toggleButton_heading;
identifier BXG_toggleButton_lat;
identifier BXG_toggleButton_lon;
identifier BXG_drawingArea;
identifier BXG_scrolledWindow;
identifier BXG_bulletinBoard;
identifier BXG_label_about_version;
identifier BXG_label_message;
identifier BXG_bulletinBoard_message;
identifier BXG_label_error_two;
identifier BXG_label_error_one;
identifier BXG_label_error_three;
identifier BXG_bulletinBoard_error;
identifier BXG_label_output_mode;
identifier BXG_toggleButton_output_off;
identifier BXG_toggleButton_output_on;
identifier BXG_radioBox_output;
identifier BXG_textField_format;
identifier BXG_label_format;
identifier BXG_fileSelectionBox;
identifier BXG_bulletinBoard_fileselection;
identifier BXG_xmDialogShell_fileselection;
identifier BXG_label_timestep_2;
identifier BXG_scale_timestep;
identifier BXG_label_timestep_1;
identifier BXG_label_timespan_2;
identifier BXG_scale_timespan;
identifier BXG_label_timespan_1;
identifier BXG_scale_meantimewindow;
identifier BXG_textField_modeling_acceleration;
identifier BXG_textField_modeling_speed;
identifier BXG_scale_driftlat;
identifier BXG_scale_driftlon;
identifier BXG_toggleButton_modeling_inversion;
identifier BXG_toggleButton_modeling_dr;
identifier BXG_toggleButton_modeling_meanfilter;
identifier BXG_toggleButton_modeling_off;
identifier BXG_bulletinBoard_useprevious;
identifier BXG_bulletinBoard_timeinterpolation;
identifier BXG_bulletinBoard_deletebadtimetag;
identifier BXG_pushButton_offset_dismiss;
identifier BXG_pushButton_offset_apply;
identifier BXG_textField_lat_offset;
identifier BXG_textField_lon_offset;
identifier BXG_toggleButton_output_off_filelist;
identifier BXG_toggleButton_output_on_filelist;
identifier BXG_list_filelist;
procedure BxExitCB(integer);
procedure BxManageCB(string);
procedure BxSetValuesCB(string);
procedure BxUnmanageCB(string);
procedure do_button_use_cmg();
procedure do_button_use_dr();
procedure do_button_use_smg();
procedure do_deletebadtimetag_apply();
procedure do_done();
procedure do_driftlat();
procedure do_driftlon();
procedure do_editlistselection();
procedure do_end();
procedure do_event();
procedure do_expose();
procedure do_filelist_remove();
procedure do_fileselection_cancel();
procedure do_fileselection_filter();
procedure do_fileselection_nomatch();
procedure do_fileselection_ok();
procedure do_flag();
procedure do_forward();
procedure do_interpolation();
procedure do_interpolationrepeats();
procedure do_meantimewindow();
procedure do_model_mode();
procedure do_modeling_apply();
procedure do_nextbuffer();
procedure do_offset_apply();
procedure do_resize();
procedure do_reverse();
procedure do_revert();
procedure do_set_interval();
procedure do_showall();
procedure do_start();
procedure do_timeinterpolation_apply();
procedure do_timespan();
procedure do_timestep();
procedure do_toggle_deselect();
procedure do_toggle_deselectall();
procedure do_toggle_dr_lat();
procedure do_toggle_dr_lon();
procedure do_toggle_heading();
procedure do_toggle_lat();
procedure do_toggle_lon();
procedure do_toggle_org_heading();
procedure do_toggle_org_lat();
procedure do_toggle_org_lon();
procedure do_toggle_org_sonardepth();
procedure do_toggle_org_speed();
procedure do_toggle_org_time();
procedure do_toggle_output_off();
procedure do_toggle_output_off_filelist();
procedure do_toggle_output_on();
procedure do_toggle_output_on_filelist();
procedure do_toggle_pick();
procedure do_toggle_select();
procedure do_toggle_selectall();
procedure do_toggle_show_cmg();
procedure do_toggle_show_smg();
procedure do_toggle_sonardepth();
procedure do_toggle_speed();
procedure do_toggle_time();
procedure do_toggle_vru();
procedure do_unflag();
procedure do_useprevious_no();
procedure do_useprevious_yes();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list Style_use : arguments {
        arguments BaseStyle;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list Style_useReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list Style_useHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


object list_filelist : XmList widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-courier-*-r-*-*-*-90-*-*-*-*-iso8859-1'));
        XmNselectionPolicy = XmSINGLE_SELECT;
        XmNwidth = 339;
        XmNheight = 450;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_list_filelist);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object scrolledWindow_filelist : XmScrolledWindow widget {
    arguments {
        arguments Style_use;
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNbottomOffset = 10;
        XmNbottomWidget = XmPushButton pushButton_filelist_remove;
        XmNleftOffset = 0;
        XmNrightOffset = 4;
        XmNtopOffset = 6;
        XmNtopWidget = XmRowColumn setting_output_filelist;
        XmNx = 0;
        XmNy = 50;
        XmNwidth = 339;
        XmNheight = 450;
    };
    controls {
         managed XmList list_filelist;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_filelist_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNrecomputeSize = false;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNrightOffset = 13;
        XmNx = 250;
        XmNy = 510;
        XmNwidth = 80;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("form_filelist");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_output_on_filelist : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Output Edits");
        XmNwidth = 116;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_output_on_filelist);
        XmNvalueChangedCallback = procedure do_toggle_output_on_filelist();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_output_off_filelist : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Browse Only");
        XmNwidth = 116;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_output_off_filelist);
        XmNvalueChangedCallback = procedure do_toggle_output_off_filelist();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output_filelist : XmRowColumn widget {
    arguments {
        arguments Style_use;
        XmNnumColumns = 1;
        XmNpacking = XmPACK_COLUMN;
        XmNradioBehavior = true;
        XmNspacing = 0;
        XmNorientation = XmHORIZONTAL;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 3;
        XmNtopOffset = 10;
        XmNleftWidget = XmLabel setting_output_label_filelist;
        XmNx = 110;
        XmNy = 10;
        XmNwidth = 238;
        XmNheight = 34;
    };
    controls {
         managed XmToggleButton toggleButton_output_on_filelist;
         managed XmToggleButton toggleButton_output_off_filelist;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output_label_filelist : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Output Mode:");
        XmNmarginWidth = 0;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
        XmNx = 10;
        XmNy = 10;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_filelist_edit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Edit", separate=true) &
 compound_string("Selected", separate=true) &
 compound_string("File");
        XmNrecomputeSize = false;
        XmNtopAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNleftOffset = 10;
        XmNx = 10;
        XmNy = 510;
        XmNwidth = 90;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_editlistselection();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_filelist_remove : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Remove", separate=true) &
 compound_string("Selected", separate=true) &
 compound_string("File");
        XmNrecomputeSize = false;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNleftOffset = 10;
        XmNleftWidget = XmPushButton pushButton_filelist_edit;
        XmNx = 110;
        XmNy = 510;
        XmNwidth = 104;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_filelist_remove();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object form_filelist : XmFormDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogTitle = compound_string("Files Available for Editing");
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1109;
        XmNy = 1047;
        XmNwidth = 343;
        XmNheight = 580;
    };
    controls {
         managed XmPushButton pushButton_filelist_remove;
         managed XmPushButton pushButton_filelist_edit;
         managed XmLabel setting_output_label_filelist;
         managed XmRowColumn setting_output_filelist;
         managed XmPushButton pushButton_filelist_dismiss;
         managed XmScrolledWindow scrolledWindow_filelist;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object dialogShell_filelist : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNwidth = 343;
!(BX)        XmNheight = 580;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog form_filelist;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_offset_lon : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Longitude Offset (degrees):");
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 220;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_offset_lat : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Latitude Offset (degrees):");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNtopOffset = 10;
        XmNtopWidget = XmLabel label_offset_lon;
        XmNx = 0;
        XmNy = 60;
        XmNwidth = 230;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textField_lon_offset : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftOffset = 10;
        XmNrightOffset = 12;
        XmNtopOffset = 10;
        XmNleftWidget = XmLabel label_offset_lon;
        XmNx = 240;
        XmNy = 10;
        XmNwidth = 149;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_lon_offset);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textField_lat_offset : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 240;
        XmNrightOffset = 12;
        XmNtopOffset = 10;
        XmNtopWidget = XmTextField textField_lon_offset;
        XmNx = 240;
        XmNy = 60;
        XmNwidth = 149;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_lat_offset);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_offset_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 14;
        XmNleftOffset = 50;
        XmNrightOffset = 50;
        XmNrightWidget = XmPushButton pushButton_offset_dismiss;
        XmNx = 50;
        XmNy = 120;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_offset_apply);
        XmNactivateCallback = procedure do_offset_apply();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_offset_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 14;
        XmNleftOffset = 210;
        XmNrightOffset = 73;
        XmNx = 210;
        XmNy = 120;
        XmNwidth = 118;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_offset_dismiss);
        XmNactivateCallback = procedure BxUnmanageCB("form_offset");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object form_offset : XmFormDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogTitle = compound_string("Position Offset");
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1080;
        XmNy = 1250;
        XmNwidth = 401;
        XmNheight = 174;
    };
    controls {
         managed XmPushButton pushButton_offset_dismiss;
         managed XmPushButton pushButton_offset_apply;
         managed XmTextField textField_lat_offset;
         managed XmTextField textField_lon_offset;
         managed XmLabel label_offset_lat;
         managed XmLabel label_offset_lon;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_offset : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNwidth = 401;
!(BX)        XmNheight = 174;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog form_offset;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object pushButton_deletebadtimetag_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNx = 20;
        XmNy = 80;
        XmNwidth = 130;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 do_deletebadtimetag_apply();
                 BxUnmanageCB("bulletinBoard_timeinterpolation" &
 "");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_deletebadtimetag_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 160;
        XmNy = 80;
        XmNwidth = 130;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_deletebadtimetag");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_deletetimetag : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Click \"Apply\" to delete duplic" &
 "ate ", separate=true) &
 compound_string("or reverse time stamps. Non-duplicate ", separate=true) &
 compound_string("time stamps will not be affected.");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_deletebadtimetag : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1126;
        XmNy = 1262;
        XmNwidth = 310;
        XmNheight = 149;
    };
    controls {
         managed XmLabel label_deletetimetag;
         managed XmPushButton pushButton_deletebadtimetag_dismiss;
         managed XmPushButton pushButton_deletebadtimetag_apply;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_deletebadtimetag);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object dialogShell_deletebadtimetag : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Delete Bad Times";
!(BX)        XmNwidth = 310;
!(BX)        XmNheight = 149;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_deletebadtimetag;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object pushButton_timeinterpolation_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNx = 20;
        XmNy = 80;
        XmNwidth = 130;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 do_timeinterpolation_apply();
                 BxUnmanageCB("bulletinBoard_timeinterpolation" &
 "");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_timeinterpolation_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 160;
        XmNy = 80;
        XmNwidth = 130;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_timeinterpolation" &
 "");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_timeinterpolation : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Click \"Apply\" to interpolate d" &
 "uplicate ", separate=true) &
 compound_string("time stamps. Non-duplicate time stamps ", separate=true) &
 compound_string("will not be affected.");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_timeinterpolation : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1127;
        XmNy = 1262;
        XmNwidth = 307;
        XmNheight = 149;
    };
    controls {
         managed XmLabel label_timeinterpolation;
         managed XmPushButton pushButton_timeinterpolation_dismiss;
         managed XmPushButton pushButton_timeinterpolation_apply;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_timeinterpolation);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_timeinterpolation : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Time Interpolation";
!(BX)        XmNwidth = 307;
!(BX)        XmNheight = 149;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_timeinterpolation;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object pushButton_useprevious_yes : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Yes");
        XmNx = 110;
        XmNy = 70;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_useprevious_yes();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_useprevious_no : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("No");
        XmNx = 290;
        XmNy = 70;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_useprevious_no();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_useprevious : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Previously edited navigation exi" &
 "sts for the specified input file.", separate=true) &
 compound_string("Do you want to use the previously edited navigation?");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 480;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_useprevious : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogTitle = compound_string("Use previously edited navigation" &
 "?");
        XmNautoUnmanage = true;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1029;
        XmNy = 1274;
        XmNwidth = 503;
        XmNheight = 126;
    };
    controls {
         managed XmLabel label_useprevious;
         managed XmPushButton pushButton_useprevious_no;
         managed XmPushButton pushButton_useprevious_yes;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_useprevious);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_useprevious : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNwidth = 503;
!(BX)        XmNheight = 126;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_useprevious;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object toggleButton_modeling_off : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Off");
        XmNwidth = 48;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_modeling_off);
        XmNvalueChangedCallback = procedure do_model_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_modeling_meanfilter : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Gaussian Mean");
        XmNwidth = 135;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_modeling_meanfilter);
        XmNvalueChangedCallback = procedure do_model_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_modeling_dr : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dead Reckoning");
        XmNwidth = 143;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_modeling_dr);
        XmNvalueChangedCallback = procedure do_model_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_modeling_inversion : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Inversion");
        XmNwidth = 93;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_modeling_inversion);
        XmNvalueChangedCallback = procedure do_model_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object radioBox_modeling : XmRadioBox widget {
    arguments {
        arguments Style_use;
        XmNpacking = XmPACK_TIGHT;
        XmNorientation = XmHORIZONTAL;
        XmNx = 20;
        XmNy = 40;
        XmNwidth = 434;
        XmNheight = 34;
    };
    controls {
         managed XmToggleButton toggleButton_modeling_off;
         managed XmToggleButton toggleButton_modeling_meanfilter;
         managed XmToggleButton toggleButton_modeling_dr;
         managed XmToggleButton toggleButton_modeling_inversion;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_modeling_mode : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Navigation Modeling Mode:");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 200;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator2 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 470;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object scale_driftlon : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = -1000;
        XmNdecimalPoints = 5;
        XmNtitleString = compound_string("Dead Reckoning Longitude Drift (" &
 "deg/hr)");
        XmNmaximum = 1000;
        XmNshowArrows = TRUE;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 10;
        XmNy = 180;
        XmNwidth = 470;
        XmNheight = 63;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scale_driftlon);
        XmNvalueChangedCallback = procedure do_driftlon();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object scale_driftlat : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = -1000;
        XmNdecimalPoints = 5;
        XmNtitleString = compound_string("Dead Reckoning Latitude Drift (d" &
 "eg/hr)");
        XmNmaximum = 1000;
        XmNshowArrows = TRUE;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 10;
        XmNy = 250;
        XmNwidth = 470;
        XmNheight = 63;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scale_driftlat);
        XmNvalueChangedCallback = procedure do_driftlat();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator3 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 310;
        XmNwidth = 470;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_modeling_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 190;
        XmNy = 490;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_modeling");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textField_modeling_speed : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNx = 320;
        XmNy = 360;
        XmNwidth = 140;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_modeling_speed);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textField_modeling_acceleration : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNx = 320;
        XmNy = 410;
        XmNwidth = 140;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_modeling_acceleration);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_modeling_inversion : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Inversion Penalty Weighting:");
        XmNx = 10;
        XmNy = 330;
        XmNwidth = 220;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_modeling_speed : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Speed Deviation:");
        XmNx = 170;
        XmNy = 360;
        XmNwidth = 140;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_modeling_acceleration : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Acceleration:");
        XmNx = 160;
        XmNy = 410;
        XmNwidth = 150;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator4 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 450;
        XmNwidth = 470;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_modeling_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNx = 30;
        XmNy = 390;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_modeling_apply();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator5 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 470;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object scale_meantimewindow : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNdecimalPoints = 1;
        XmNvalue = 100;
        XmNtitleString = compound_string("Gaussian Mean Time Window (secon" &
 "ds)");
        XmNmaximum = 10000;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 10;
        XmNy = 100;
        XmNwidth = 470;
        XmNheight = 63;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scale_meantimewindow);
        XmNvalueChangedCallback = procedure do_meantimewindow();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_modeling : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogTitle = compound_string("Navigation Modeling");
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1035;
        XmNy = 1063;
        XmNwidth = 492;
        XmNheight = 548;
    };
    controls {
         managed XmScale scale_meantimewindow;
         managed XmSeparator separator5;
         managed XmPushButton pushButton_modeling_apply;
         managed XmSeparator separator4;
         managed XmLabel label_modeling_acceleration;
         managed XmLabel label_modeling_speed;
         managed XmLabel label_modeling_inversion;
         managed XmTextField textField_modeling_acceleration;
         managed XmTextField textField_modeling_speed;
         managed XmPushButton pushButton_modeling_dismiss;
         managed XmSeparator separator3;
         managed XmScale scale_driftlat;
         managed XmScale scale_driftlon;
         managed XmSeparator separator2;
         managed XmLabel label_modeling_mode;
         managed XmRadioBox radioBox_modeling;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_modeling : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Navigation Modeling";
!(BX)        XmNwidth = 492;
!(BX)        XmNheight = 548;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_modeling;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_timespan_1 : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("TIme Span Shown (sec):  1");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 30;
        XmNwidth = 170;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_timespan_1);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object scale_timespan : XmScale widget {
    arguments {
        arguments Style_use;
        XmNtitleString = compound_string(" ");
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNorientation = XmHORIZONTAL;
        XmNstringDirection = XmSTRING_DIRECTION_L_TO_R;
        XmNx = 180;
        XmNy = 10;
        XmNwidth = 260;
        XmNheight = 50;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scale_timespan);
        XmNvalueChangedCallback = procedure do_timespan();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_timespan_2 : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("500");
        XmNrecomputeSize = false;
        XmNx = 440;
        XmNy = 30;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_timespan_2);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_timestep_1 : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("Time Step (sec):  1");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 170;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_timestep_1);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object scale_timestep : XmScale widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNorientation = XmHORIZONTAL;
        XmNx = 180;
        XmNy = 70;
        XmNwidth = 260;
        XmNheight = 50;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scale_timestep);
        XmNvalueChangedCallback = procedure do_timestep();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_timestep_2 : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("500");
        XmNrecomputeSize = false;
        XmNx = 440;
        XmNy = 70;
        XmNwidth = 40;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_timestep_2);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_timestepping_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 200;
        XmNy = 140;
        XmNwidth = 110;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_timestepping");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_timestepping : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogTitle = compound_string("Time Stepping");
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1035;
        XmNy = 1239;
        XmNwidth = 491;
        XmNheight = 195;
    };
    controls {
         managed XmPushButton pushButton_timestepping_dismiss;
         managed XmLabel label_timestep_2;
         managed XmScale scale_timestep;
         managed XmLabel label_timestep_1;
         managed XmLabel label_timespan_2;
         managed XmScale scale_timespan;
         managed XmLabel label_timespan_1;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_timestepping : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Controls";
!(BX)        XmNwidth = 491;
!(BX)        XmNheight = 195;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_timestepping;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object fileSelectionBox : XmFileSelectionBox widget {
    arguments {
        XmNdialogTitle = compound_string("");
        XmNlistVisibleItemCount = 13;
        XmNtextFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNbuttonFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNautoUnmanage = false;
        XmNnoResize = true;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 590;
        XmNheight = 470;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
       XmNokCallback = procedures {
                 do_fileselection_ok();
                 BxUnmanageCB("bulletinBoard_fileselection");
        };
        XmNnoMatchCallback = procedure do_fileselection_nomatch();
       XmNcancelCallback = procedures {
                 do_fileselection_cancel();
                 BxUnmanageCB("bulletinBoard_fileselection");
        };
        XmNapplyCallback = procedure do_fileselection_filter();
    };
};

object label_format : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("MBIO Format ID:");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 480;
        XmNwidth = 120;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_format);
    };
};

object textField_format : XmTextField widget {
    arguments {
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNx = 140;
        XmNy = 480;
        XmNwidth = 100;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_format);
    };
};

object toggleButton_output_on : XmToggleButton widget {
    arguments {
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Output Edited Data");
        XmNwidth = 161;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_output_on);
        XmNvalueChangedCallback = procedure do_toggle_output_on();
    };
};

object toggleButton_output_off : XmToggleButton widget {
    arguments {
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Browse Only");
        XmNwidth = 161;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_output_off);
        XmNvalueChangedCallback = procedure do_toggle_output_off();
    };
};

object radioBox_output : XmRadioBox widget {
    arguments {
        XmNx = 390;
        XmNy = 480;
        XmNwidth = 167;
        XmNheight = 65;
    };
    controls {
         managed XmToggleButton toggleButton_output_on;
         managed XmToggleButton toggleButton_output_off;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_radioBox_output);
    };
};

object label_output_mode : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Output Mode:");
        XmNrecomputeSize = false;
        XmNx = 290;
        XmNy = 480;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_output_mode);
    };
};

object bulletinBoard_fileselection : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 0;
        XmNy = 1058;
        XmNwidth = 606;
        XmNheight = 557;
    };
    controls {
         managed XmLabel label_output_mode;
         managed XmRadioBox radioBox_output;
         managed XmTextField textField_format;
         managed XmLabel label_format;
         managed XmFileSelectionBox fileSelectionBox;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_fileselection);
    };
};

!(BX)object xmDialogShell_fileselection : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Select Input Data File";
!(BX)        XmNallowShellResize = false;
!(BX)        XmNwidth = 606;
!(BX)        XmNheight = 557;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_fileselection;
!(BX)    };
!(BX)    callbacks {
!(BX)        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xmDialogShell_fileselection);
!(BX)    };
!(BX)};

object pushButton_error : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("OK");
        XmNx = 110;
        XmNy = 110;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_three : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("permission in this directory!");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_three);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unable to open output file.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_one);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("You probably do not have write");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_two);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_error : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1125;
        XmNy = 1256;
        XmNwidth = 311;
        XmNheight = 161;
    };
    controls {
         managed XmLabel label_error_two;
         managed XmLabel label_error_one;
         managed XmLabel label_error_three;
         managed XmPushButton pushButton_error;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_error);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_error : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Error";
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 161;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_error;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object label_message : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("MBvelocitytool is loading data.." &
 ".");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_pleasewait : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Thank you for your patience.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_message : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 1091;
        XmNy = 1294;
        XmNwidth = 379;
        XmNheight = 86;
    };
    controls {
         managed XmLabel label_pleasewait;
         managed XmLabel label_message;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_message : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Please Wait...";
!(BX)        XmNmwmInputMode = MWM_INPUT_MODELESS;
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 379;
!(BX)        XmNheight = 86;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_message;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_about_mbedit : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MBnavedit");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_function : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Interactive Navigation Editor");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 450;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_version : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-medium-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System Release 4.6", separate=true) &
 compound_string("April 14, 1999");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 360;
        XmNwidth = 450;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_about_version);
    };
};

object separator : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_for : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("for Processing and Display of Sw" &
 "ath Sonar Data");
        XmNx = 10;
        XmNy = 190;
        XmNwidth = 460;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_component : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("One Component of the");
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbpub : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("An Open Source Software Package");
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbsystem : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System");
        XmNx = 10;
        XmNy = 120;
        XmNwidth = 450;
        XmNheight = 38;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_columbia : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Monterey Bay", separate=true) &
 compound_string("Aquarium", separate=true) &
 compound_string("Research Institute");
        XmNx = 60;
        XmNy = 290;
        XmNwidth = 160;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_lamont : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Lamont-Doherty ", separate=true) &
 compound_string("Earth Observatory", separate=true) &
 compound_string("of Columbia University");
        XmNx = 250;
        XmNy = 290;
        XmNwidth = 190;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Created by:");
        XmNx = 10;
        XmNy = 240;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_about_dismiss : XmPushButton widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Dismiss");
        XmNx = 190;
        XmNy = 420;
        XmNwidth = 90;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_about");
    };
};

object separator1 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 220;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create1 : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("David W. Caress    and    Dale N" &
 ". Chayes");
        XmNx = 10;
        XmNy = 260;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard_about : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1040;
        XmNy = 1104;
        XmNwidth = 481;
        XmNheight = 466;
    };
    controls {
         managed XmLabel label_about_create1;
         managed XmSeparator separator1;
         managed XmPushButton pushButton_about_dismiss;
         managed XmLabel label_about_create;
         managed XmLabel label_about_lamont;
         managed XmLabel label_about_columbia;
         managed XmLabel label_about_mbsystem;
         managed XmLabel label_about_mbpub;
         managed XmLabel label_about_component;
         managed XmLabel label_about_for;
         managed XmSeparator separator;
         managed XmLabel label_about_version;
         managed XmLabel label_about_function;
         managed XmLabel label_about_mbedit;
    };
    callbacks {
    };
};

!(BX)object xmDialogShell_about : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "About MBnavedit";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 481;
!(BX)        XmNheight = 466;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_about;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object drawingArea : XmDrawingArea widget {
    arguments {
        arguments Style_use;
        XmNborderWidth = 1;
        XmNbackground = color('white');
        XmNwidth = 767;
        XmNheight = 2000;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drawingArea);
        XmNresizeCallback = procedure do_resize();
        XmNinputCallback = procedure do_event();
        XmNexposeCallback = procedure do_expose();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object scrolledWindow : XmScrolledWindow widget {
    arguments {
        arguments Style_use;
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNx = 210;
        XmNy = 80;
        XmNwidth = 800;
        XmNheight = 590;
    };
    controls {
         managed XmDrawingArea drawingArea;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scrolledWindow);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_lon : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Longitude Plot");
        XmNstringDirection = XmSTRING_DIRECTION_L_TO_R;
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 140;
        XmNwidth = 140;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_lon);
        XmNvalueChangedCallback = procedure do_toggle_lon();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_lat : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Latitude Plot");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 210;
        XmNwidth = 110;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_lat);
        XmNvalueChangedCallback = procedure do_toggle_lat();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_heading : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Heading Plot");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 370;
        XmNwidth = 110;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_heading);
        XmNvalueChangedCallback = procedure do_toggle_heading();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_speed : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Speed Plot");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 280;
        XmNwidth = 160;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_speed);
        XmNvalueChangedCallback = procedure do_toggle_speed();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_lon : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 160;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_lon);
        XmNvalueChangedCallback = procedure do_toggle_org_lon();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_lat : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 230;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_lat);
        XmNvalueChangedCallback = procedure do_toggle_org_lat();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_speed : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 300;
        XmNwidth = 180;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_speed);
        XmNvalueChangedCallback = procedure do_toggle_org_speed();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_show_smg : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Speed-Made-Good");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 320;
        XmNwidth = 180;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_show_smg);
        XmNvalueChangedCallback = procedure do_toggle_show_smg();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_speed_smg : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("Use Speed-Made-Good");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 340;
        XmNwidth = 180;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_speed_smg);
        XmNactivateCallback = procedure do_button_use_smg();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_heading : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 390;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_heading);
        XmNvalueChangedCallback = procedure do_toggle_org_heading();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_show_cmg : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Course-Made-Good");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 410;
        XmNwidth = 190;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_show_cmg);
        XmNvalueChangedCallback = procedure do_toggle_show_cmg();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_heading_cmg : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("Use Course-Made-Good");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 430;
        XmNwidth = 180;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_heading_cmg);
        XmNactivateCallback = procedure do_button_use_cmg();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_pick : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Pick");
        XmNwidth = 51;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_pick);
        XmNvalueChangedCallback = procedure do_toggle_pick();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_select : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Select");
        XmNwidth = 64;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_select);
        XmNvalueChangedCallback = procedure do_toggle_select();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_deselect : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Deselect");
        XmNwidth = 78;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_deselect);
        XmNvalueChangedCallback = procedure do_toggle_deselect();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_selectall : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Select All");
        XmNrecomputeSize = false;
        XmNwidth = 93;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_selectall);
        XmNvalueChangedCallback = procedure do_toggle_selectall();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_deselectall : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Deselect All");
        XmNrecomputeSize = false;
        XmNwidth = 110;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_deselectall);
        XmNvalueChangedCallback = procedure do_toggle_deselectall();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object radioBox : XmRadioBox widget {
    arguments {
        arguments Style_use;
        XmNpacking = XmPACK_TIGHT;
        XmNlabelString = compound_string("");
        XmNorientation = XmHORIZONTAL;
        XmNx = 600;
        XmNy = 40;
        XmNwidth = 414;
        XmNheight = 40;
    };
    controls {
         managed XmToggleButton toggleButton_pick;
         managed XmToggleButton toggleButton_select;
         managed XmToggleButton toggleButton_deselect;
         managed XmToggleButton toggleButton_selectall;
         managed XmToggleButton toggleButton_deselectall;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_radioBox);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_interpolate : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Interpolate");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 50;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_interpolate);
        XmNactivateCallback = procedure do_interpolation();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_revert : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Revert");
        XmNrecomputeSize = false;
        XmNx = 270;
        XmNy = 50;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_revert);
        XmNactivateCallback = procedure do_revert();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_showall : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Show All");
        XmNrecomputeSize = false;
        XmNx = 580;
        XmNy = 10;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_showall();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_set_interval : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Pick Zoom");
        XmNrecomputeSize = false;
        XmNx = 670;
        XmNy = 10;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_set_interval();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_vru : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Roll, Pitch, and Heave Plots");
        XmNx = 10;
        XmNy = 510;
        XmNwidth = 191;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_vru);
        XmNvalueChangedCallback = procedure do_toggle_vru();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_about : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("About");
        XmNx = 920;
        XmNy = 10;
        XmNwidth = 80;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_about");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_quit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Quit");
        XmNx = 840;
        XmNy = 10;
        XmNwidth = 70;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxExitCB(0);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_reverse : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Reverse");
        XmNx = 250;
        XmNy = 10;
        XmNwidth = 69;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_reverse);
        XmNactivateCallback = procedure do_reverse();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_forward : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Forward");
        XmNx = 320;
        XmNy = 10;
        XmNwidth = 69;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_forward);
        XmNactivateCallback = procedure do_forward();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_done : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Done");
        XmNx = 760;
        XmNy = 10;
        XmNwidth = 70;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_done);
        XmNactivateCallback = procedure do_done();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_nextbuffer : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Next Buffer");
        XmNx = 480;
        XmNy = 10;
        XmNwidth = 88;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_nextbuffer();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_time : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Time Interval Plot");
        XmNstringDirection = XmSTRING_DIRECTION_L_TO_R;
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_time);
        XmNvalueChangedCallback = procedure do_toggle_time();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_time : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 110;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_time);
        XmNvalueChangedCallback = procedure do_toggle_org_time();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_dr_lon : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Dead Reckoning");
        XmNx = 20;
        XmNy = 180;
        XmNwidth = 159;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_dr_lon);
        XmNvalueChangedCallback = procedure do_toggle_dr_lon();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_dr_lat : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Dead Reckoning");
        XmNx = 20;
        XmNy = 250;
        XmNwidth = 159;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_dr_lat);
        XmNvalueChangedCallback = procedure do_toggle_dr_lat();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_solution : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-p-*-iso8859-1'));
        XmNlabelString = compound_string("Use Solution");
        XmNx = 360;
        XmNy = 50;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_solution);
        XmNactivateCallback = procedure do_button_use_dr();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_sonardepth : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Sonar Depth Plot");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 460;
        XmNwidth = 140;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_sonardepth);
        XmNvalueChangedCallback = procedure do_toggle_sonardepth();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_org_sonardepth : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-120-75-75-p-*-iso8859-1'));
        XmNindicatorOn = XmINDICATOR_CHECK_BOX;
        XmNlabelString = compound_string("Show Original Data");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 480;
        XmNwidth = 150;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_org_sonardepth);
        XmNvalueChangedCallback = procedure do_toggle_org_sonardepth();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_controls_timespan : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Time Stepping");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_timestepping");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_controls_modeling : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Nav Modeling");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_modeling");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_controls_timeinterpolation : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Time Interpolation");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_controls_timeinterpolation);
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_timeinterpolation" &
 "");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_controls_deletebadtimetag : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Delete Bad Times");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_controls_deletebadtimetag);
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_deletebadtimetag");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_controls_offset : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Position Offset");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("form_offset");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_controls : XmPulldownMenu widget {
    arguments {
        arguments Style_use;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 137;
        XmNheight = 124;
    };
    controls {
         managed XmPushButton pushButton_controls_timespan;
         managed XmPushButton pushButton_controls_modeling;
         managed XmPushButton pushButton_controls_timeinterpolation;
         managed XmPushButton pushButton_controls_deletebadtimetag;
         managed XmPushButton pushButton_controls_offset;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object cascadeButton_controls : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Controls");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 77;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_controls;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_controls : XmMenuBar widget {
    arguments {
        arguments Style_use;
        XmNx = 80;
        XmNy = 10;
        XmNwidth = 87;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton cascadeButton_controls;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_flag : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Flag");
        XmNx = 460;
        XmNy = 50;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_flag);
        XmNactivateCallback = procedure do_flag();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_unflag : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unflag");
        XmNx = 530;
        XmNy = 50;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_unflag);
        XmNactivateCallback = procedure do_unflag();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_interpolaterepeats : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("Interpolate Repeats");
        XmNrecomputeSize = false;
        XmNx = 110;
        XmNy = 50;
        XmNwidth = 150;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_interpolaterepeats);
        XmNactivateCallback = procedure do_interpolationrepeats();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_file : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Open");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_file);
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselection");
                 BxSetValuesCB("label_format.labelString=MBIO F" &
 "ormat ID:");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_filelist : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("File Selection List");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("form_filelist");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_file : XmPulldownMenu widget {
    arguments {
        arguments Style_use;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 135;
        XmNheight = 52;
    };
    controls {
         managed XmPushButton pushButton_file;
         managed XmPushButton pushButton_filelist;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object cascadeButton_file : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("File");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 41;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_file;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_file : XmMenuBar widget {
    arguments {
        arguments Style_use;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 51;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton cascadeButton_file;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_start : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Start");
        XmNx = 180;
        XmNy = 10;
        XmNwidth = 70;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_start);
        XmNactivateCallback = procedure do_start();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_end : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("End");
        XmNx = 390;
        XmNy = 10;
        XmNwidth = 70;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_end);
        XmNactivateCallback = procedure do_end();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 1024;
        XmNheight = 683;
    };
    controls {
         managed XmPushButton pushButton_end;
         managed XmPushButton pushButton_start;
         managed XmMenuBar menuBar_file;
         managed XmPushButton pushButton_interpolaterepeats;
         managed XmPushButton pushButton_unflag;
         managed XmPushButton pushButton_flag;
         managed XmMenuBar menuBar_controls;
         managed XmToggleButton toggleButton_org_sonardepth;
         managed XmToggleButton toggleButton_sonardepth;
         managed XmPushButton pushButton_solution;
         managed XmToggleButton toggleButton_dr_lat;
         managed XmToggleButton toggleButton_dr_lon;
         managed XmToggleButton toggleButton_org_time;
         managed XmToggleButton toggleButton_time;
         managed XmPushButton pushButton_nextbuffer;
         managed XmPushButton pushButton_done;
         managed XmPushButton pushButton_forward;
         managed XmPushButton pushButton_reverse;
         managed XmPushButton pushButton_quit;
         managed XmPushButton pushButton_about;
         managed XmToggleButton toggleButton_vru;
         managed XmPushButton pushButton_set_interval;
         managed XmPushButton pushButton_showall;
         managed XmPushButton pushButton_revert;
         managed XmPushButton pushButton_interpolate;
         managed XmRadioBox radioBox;
         managed XmPushButton pushButton_heading_cmg;
         managed XmToggleButton toggleButton_show_cmg;
         managed XmToggleButton toggleButton_org_heading;
         managed XmPushButton pushButton_speed_smg;
         managed XmToggleButton toggleButton_show_smg;
         managed XmToggleButton toggleButton_org_speed;
         managed XmToggleButton toggleButton_org_lat;
         managed XmToggleButton toggleButton_org_lon;
         managed XmToggleButton toggleButton_speed;
         managed XmToggleButton toggleButton_heading;
         managed XmToggleButton toggleButton_lat;
         managed XmToggleButton toggleButton_lon;
         managed XmScrolledWindow scrolledWindow;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object mainWindow : XmMainWindow widget {
    arguments {
        arguments Style_use;
        XmNx = 964;
        XmNy = 300;
        XmNwidth = 1024;
        XmNheight = 683;
    };
    controls {
!(BX)         unmanaged XmDialogShell dialogShell_filelist;
!(BX)         unmanaged XmDialogShell xmDialogShell_offset;
!(BX)         unmanaged XmDialogShell dialogShell_deletebadtimetag;
!(BX)         unmanaged XmDialogShell xmDialogShell_timeinterpolation;
!(BX)         unmanaged XmDialogShell xmDialogShell_useprevious;
!(BX)         unmanaged XmDialogShell xmDialogShell_modeling;
!(BX)         unmanaged XmDialogShell xmDialogShell_timestepping;
!(BX)         unmanaged XmDialogShell xmDialogShell_fileselection;
!(BX)         unmanaged XmDialogShell xmDialogShell_error;
!(BX)         unmanaged XmDialogShell xmDialogShell_message;
!(BX)         unmanaged XmDialogShell xmDialogShell_about;
         managed XmBulletinBoard bulletinBoard;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "MBnavedit";
!(BX)        XmNiconName = "MBnavedit";
!(BX)        XmNallowShellResize = true;
!(BX)        XmNx = 964;
!(BX)        XmNy = 300;
!(BX)        XmNwidth = 1024;
!(BX)        XmNheight = 683;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)        XmNdestroyCallback = procedure BxExitCB(0);
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};
end module;
