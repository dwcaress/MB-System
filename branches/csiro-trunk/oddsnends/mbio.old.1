.TH MBIO 1 "15 January 1993"
.SH NAME
\fBMBIO\fP - Format independent input/output library for multibeam sonar data.

.SH VERSION
This manual page describes \fBMBIO\fP version 3.00

.SH DESCRIPTION
\fBMBIO\fP (\fBm\fPulti\fBb\fPeam \fBi\fPnput/\fBo\fPutput) is a library
of functions used for reading and writing multibeam sonar bathymetry
and backscatter data files.  \fBMBIO\fP supports a large number of data
formats associated with different institutions and different sonar systems.
The purpose of \fBMBIO\fP is to allow users to write processing and display
programs which are independent of particular data formats and to provide
a standard approach to multibeam data i/o.  Version 3.XX represents a complete
rethinking and rewriting of \fBMBIO\fP; programs written to use versions 1.XX
or 2.XX of \fBMBIO\fP will have to be modified and recompiled.

.SH AUTHORSHIP
David W. Caress (caress@lamont.ldgo.columbia.edu)
.br
Dale N. Chayes (dale@lamont.ldgo.columbia.edu)
.br
Lamont-Doherty Earth Observatory
.br
Palisades, NY  10964

.SH OVERVIEW
\fBMBIO\fP has two levels of functionality.  The higher level of routines 
(composed of functions with names beginning with "mb_") allows users to read 
and write multibeam data independent of format, with the limitation that 
only a limited set of navigation information is passed.  Thus, some of the
information contained in certain data formats (e.g. the "heave" value
in Hydrosweep DS data) is not be passed by the "mb_" functions.  
In terms of programming, the "mb_" functions can be used without any 
special include files or any knowledge of the actual data structures
used in the various supported data formats.  In general, the "mb_"
functions are useful for applications such as graphics which require only
the navigation and the depth and/or backscatter values.  
The lower level of routines (composed of functions with
names beginning with "mbr_") read and write the complete data structures
and pass pointers to those structures.  The "mbr_" functions require 
include files for the formats used but allow access to the complete
data structures; these functions are useful for applications which require
special parameters peculiar to some particular data format (e.g. processing
Hydrosweep DS backscatter by applying system gain settings to the measured
values).  In addition, the "mb_" functions make use of the "mbr_" functions
to do the actual i/o. 

.SH SUPPORTED FORMATS
The following multibeam data formats are supported in this version of 
\fBMBIO\fP:
 	ID	Format Name	Description
 	--	-----------	-----------
 	1	mbf_sbsiomrg	Sea Beam, 16 ping, bathymetry, 
 				  binary, uncentered, SIO.
 	2	mbf_sbsiocen	Sea Beam, 16 ping, bathymetry, 
 				  binary, centered, SIO.
 	3	mbf_sbsiolsi	Sea Beam, 16 ping, bathymetry, 
 				  binary, centered, obsolete, SIO.
 	4	mbf_sburicen	Sea Beam, 16 ping, bathymetry, 
 				  binary, centered, URI.
 	5	mbf_hsldedmb	Hydrosweep DS, 59 ping, bathymetry, 
 				  binary, NRL.
 	6	mbf_hsuricen	Hydrosweep DS, 59 ping, bathymetry, 
 				  binary, URI.
 	7	mbf_hsatlraw	Hydrosweep DS raw format, 59 ping, 
 				  bathymetry and backscatter, 
  				  ascii, Atlas Electronik.
 	8	mbf_sbcomsio	Swath Bathy (Sea Beam, Sea Beam 2000, 
 				  and Hydrosweep), variable ping, 
 				  bathymetry and backscatter, 
 				  binary, centered, SIO.
 	9	mbf_hsldeoih	Hydrosweep in-house format, 59 ping,
 				  bathymetry and backscatter, 
 				  binary, centered, L-DEO.
 	10	mbf_mbldeoih	Generic in-house multibeam, variable ping, 
 				  bathymetry and backscatter, 
 				  binary, centered, L-DEO.

.SH CONTROL PARAMETERS
The behavior of the "mb_" high level functions is set by a number of control
parameters listed below:
 	\fIformat_id\fP:  	format identifier
 	\fIpings\fP:  		number of pings to average
 	\fIlonflip\fP:  	output longitude range
 	\fIbounds\fP:  		desired data bounds:
 	\fIbtime\fP:  		desired beginning time:
 	\fIetime\fP:  		desired ending time:
 	\fIspeedmin\fP:  	minimum ship speed allowed
 	\fItimegap\fP:  	minimum time gap allowed before a break 
 					in the data
	\fIverbose\fP:		verbosity of standard error output

The format identifier \fIformat_id\fP specifies which of the supported
data formats is being read or written; the currently supported formats
are listed in the "SUPPORTED FORMATS" section.

The \fIpings\fP parameter determines whether and how pings are averaged as part
of data input.  If \fIpings\fP = 1, then no ping averaging will be done and
each ping read will be returned unaltered by the reading function.  If
\fIpings\fP > 1, then the navigation and beam data for \fIpings\fP pings
will be read, averaged, and returned as the data for a single ping.  If
\fIpings\fP = 0, then the ping averaging will be varied so that the
along-track distance between averaged pings is as close as possible to the 
across-track distance between beams.

The \fIlonflip\fP paramenter determines the range in which longitude values
are returned:
 	\fIlonflip\fP = -1 : -360 to   0
 	\fIlonflip\fP =  0 : -180 to 180
 	\fIlonflip\fP =  1 :    0 to 360

The \fIbounds\fP array sets the area within which data are desired.
Data which low outside the area specified by \fIbounds\fP will not
be returned by the reading function.
 	\fIbounds\fP[0] : minimum longitude
 	\fIbounds\fP[1] : maximum longitude
 	\fIbounds\fP[2] : minimum latitude
 	\fIbounds\fP[3] : maximum latitude

The \fIbtime\fP array sets the desired beginning time for the data.
Data with an earlier time stamp will not be returned by the reading
function.
 	\fIbtime\fP[0] : year
 	\fIbtime\fP[1] : month
 	\fIbtime\fP[2] : day
 	\fIbtime\fP[3] : hour
 	\fIbtime\fP[4] : minute
 	\fIbtime\fP[5] : second

The \fIbtime\fP array sets the desired ending time for the data.
Data with a later time stamp will not be returned by the reading
function.
 	\fIbtime\fP[0] : year
 	\fIbtime\fP[1] : month
 	\fIbtime\fP[2] : day
 	\fIbtime\fP[3] : hour
 	\fIbtime\fP[4] : minute
 	\fIbtime\fP[5] : second

The \fIspeedmin\fP parameter sets the minimum acceptable ship speed for 
the data.  If the ship speed associated with any ping is less than 
\fIspeedmin\fP, then that data will not be returned by the reading function.
This is used to eliminate data collected while a ship is on station is
a simple way.

The \fItimegap\fP parameter sets the minimum time gap allowed before a 
gap in the data is declared.  Ping averaging is not done across
data gaps.

The \fIverbose\fP parameter sets the verbosity of standard error output
for MBIO functions.
 	\fIverbose\fP = 0:	silent execution
 	\fIverbose\fP = 1:	simple output including
 				program name, version
 				and simple progress updates
 	\fIverbose\fP = 2:	debug mode with copious output
 				including every function call
 				and status listings
.br
Programs using \fBMBIO\fP should adopt these verbosity conventions as well.

.SH FUNCTION STATUS AND ERROR CODES
All "mb_" functions return an integer status value with the 
convention that:
 	status = 1:	success
 	status = 0:	failure
.br
The "mb_" functions involving the reading of data also pass an error
value argument with a more complicated meaning:
  	error = 0:	No error
 	error = 1:	Unable to open file, initialization failed
 	error = 2:	Illegal format identifier, initialization failed
  	error = 3:	Read error, probably end-of-file
  	error = 4:	No data in specified location bounds
  	error = 5:	No data in specified time interval
 	error = 6:	Invalid mbio i/o descriptor
 	error = 7:	Inconsistent usage of mbio i/o descriptor
  	error = -1:	Data gap, current data is before gap
  	error = -2:	Data gap, current data is after gap
  	error = -3:	Data outside specified location bounds
  	error = -4:	Data outside specified time interval
  	error = -5:	Ship speed too small
  	error = -6:	Unintellible data record
.br
In general, programs should treat negative error values as non-fatal
(reading can continue) and positive error values as fatal (the data
file should be closed).
The "mbr_" functions involving writing return an integer status value
just like the "mb_" functions.
The "mbr_" functions involving reading return a pointer to a structure
containing the data; here the convention is that:
 	status != NULL:	success
 	status = NULL:	failure
.br
All "mbr_" functions pass an error value argument as well.  The status and
error values are defined in the include file \fBmb_status.h\fP.

.SH FUNCTION DESCRIPTIONS
.RE
.IP
int \fBmb_defaults\fP(\fIformat_id\fP, \fIpings, \fIlonflip, \fIbounds\fP, 
\fIbtime\fP, \fIetime\fP, \fIspeedmin\fP, \fItimegap\fP, \fIverbose\fP)
.br
int *\fIformat_id\fP;
.br
int *\fIpings\fP;
.br
int *\fIlonflip\fP;
.br
double \fIbounds\fP[4];
.br
int \fIbtime[6]\fP;
.br
int \fIetime[6]\fP;
.br
double *\fIspeedmin\fP;
.br
double *\fItimegap\fP;
.br
double *\fIverbose\fP;
.RS 10
The function \fBmb_defaults\fP provides default control values which
can be used by \fBmbio\fP functions. 
If an .mbio_defaults file exists in the current
directory or the user's home directory, the defaults are read from 
this file.  An .mbio_defaults in the current directory has precedence.
A status value is returned to indicate success or failure.
.RE
.IP
int \fBmb_format_info\fP(\fIverbose\fP, \fIformat_id\fP, \fImessage\fP)
.br
int *\fIverbose\fP;
.br
int *\fIformat_id\fP;
.br
char *\fImessage\fP;
.RS 10
Given the format identifier \fIformat_id\fP, \fBmb_format_info\fP returns a
short description of the format in the string \fImessage\fP.  A return
status value signals success if \fIformat_id\fP is valid and failure otherwise.
The \fIverbose\fP parameter controls the verbosity of the standard error 
output.
.RE
.IP
int \fBmb_format_check\fP(\fIverbose\fP, \fIfile\fP)
.br
int *\fIverbose\fP;
.br
char *\fIfile\fP;
.RS 10
The function \fBmb_format_check\fP attempts to determine the format
of the data file \fIfile\fP. A return
status value signals success or failure; a status = 0 indicates failure
and a status > 0 gives the format identifier for the data.
The \fIverbose\fP parameter controls the verbosity of the standard error 
output.
.RE
.IP
int \fBmb_read_init\fP(\fIfile\fP, \fIformat_id\fP, \fIpings, \fIlonflip, 
\fIbounds\fP, \fIbtime\fP, \fIetime\fP, \fIspeedmin\fP, 
\fItimegap\fP, \fIverbose\fP,
\fImbio_ptr\fP, \fIbtime_d\fP, \fIetime_d\fP, 
\fIbeams_bath\fP, \fIbeams_back\fP, \fIerror\fP)
.br
char *\fIfile\fP;
.br
int *\fIformat_id\fP;
.br
int *\fIpings\fP;
.br
int *\fIlonflip\fP;
.br
double \fIbounds\fP[4];
.br
int \fIbtime[6]\fP;
.br
int \fIetime[6]\fP;
.br
double *\fIspeedmin\fP;
.br
double *\fItimegap\fP;
.br
int *\fIverbose\fP;
.br
char *\fImbio_ptr\fP;
.br
double *\fIbtime_d\fP;
.br
double *\fIetime_d\fP;
.br
int *\fIbeams_bath\fP;
.br
int *\fIbeams_back\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_read_init\fP initializes the data file to be read 
and the data structures required for reading the data. 
In addition to the
input filename \fIfile\fP, the input control parameters correspond
to the control parameters described above in the "CONTROL PARAMETERS"
section.
The returned values are:
 	\fImbio_ptr\fP:	pointer to a structure describing the input file
 	\fIbtime_d\fP:		desired beginning time in minutes since 1/1/81 00:00:0
 	\fIetime_d\fP:		desired ending time in minutes since 1/1/81 00:00:0
 	\fIbeams_bath\fP:	maximum number of bathymetry beams
 	\fIbeams_back\fP:	maximum number of backscatter beams
 	\fIerror\fP:		error value
.br
The structure pointed to by
\fImbio_ptr\fP holds the file descriptor and all of the control parameters
which govern how the data is read; this pointer must be provided to
the functions \fBmb_read\fP or \fBmb_get\fP to read data. The values 
\fIbeams_bath\fP
and \fIbeams_back\fP return the maximum number of bathymetry and backscatter
beams that the specified data format may contain.  In order to successfully
read data, the calling program must
provide pointers to arrays large enough to hold \fIbeams_bath\fP bathymetry
values and \fIbeams_back\fP backscatter variables. The values \fIbtime_d\fP
and \fIetime_d\fP give the desired beginning and end times of the data
converted to minutes since 00:00:00 on January 1, 1981; internally
\fBMBIO\fP using these units to calculate time.
A status value indicating success or failure is returned; an error value
argument passes more detailed information about initialization failures. 
.RE
.IP
int \fBmb_read\fP(\fImbio_ptr\fP, \fIpingavg\fP, \fItime_i\fP, \fItime_d\fP, 
\fInavlon\fP, \fInavlat\fP, \fIspeed\fP, \fIheading\fP, \fIrange\fP, 
\fInbath\fP, \fIbath\fP, \fIbathlon\fP, \fIbathlat\fP, 
\fInback\fP, \fIback\fP, \fIbacklon\fP, \fIbacklat\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int *\fIpingavg\fP;
.br
int \fItime_i\fP[6];
.br
double *\fItime_d\fP;
.br
double *\fInavlon\fP;
.br
double *\fInavlat\fP;
.br
double *\fIspeed\fP;
.br
double *\fIheading\fP;
.br
double *\fIrange\fP;
.br
int *\fInbath\fP;
.br
double *\fIbath\fP;
.br
double *\fIbathlon\fP;
.br
double *\fIbathlat\fP;
.br
int *\fInback\fP;
.br
double *\fIback\fP;
.br
double *\fIbacklon\fP;
.br
double *\fIbacklat\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_read\fP reads, processes, and returns multibeam
data according to the mbio descriptor pointed to by \fImbio_ptr\fP.
The data is in the form of bathymetry and backscatter values combined
with the longitude and latitude locations of the bathymetry and 
backscatter measurements.
The return values are:
 	\fIpingavg\fP:		number of pings averaged to give current data;
 			other values will be averaged if pingavg > 1
 	\fItime_i\fP:		time of current ping
 			\fItime_i\fP[0]: year
 			\fItime_i\fP[1]: month
 			\fItime_i\fP[2]: day
 			\fItime_i\fP[3]: hour
 			\fItime_i\fP[4]: minute
 			\fItime_i\fP[5]: second
 	\fItime_d\fP:		time of current ping in minutes since 1/1/81 00:00:00
 	\fInavlon\fP:		longitude
 	\fInavlat\fP:		latitude
 	\fIspeed\fP:		ship speed in km/s
 	\fIheading\fP:		ship heading in degrees
 	\fIrange\fP:		distance along shiptrack since beginning of data in km
 	\fInbath\fP:		number of bathymetry values
 	\fIbath\fP:		array of bathymetry values in meters
 	\fIbathlon\fP:		array of of longitude values corresponding 
 			to bathymetry
 	\fIbathlat\fP:		array of of latitude values corresponding 
 			to bathymetry
 	\fInback\fP:		number of backscatter values
 	\fIback\fP:		array of backscatter values in meters
 	\fIbacklon\fP:		array of of longitude values corresponding 
 			to backscatter
 	\fIbacklat\fP:		array of of latitude values corresponding 
 			to backscatter
 	\fIerror\fP:		error value
.br
A status value indicating success or failure is returned; the error value
argument \fIerrorr\fP passes more detailed information about 
read failures. 
.RE
.IP
int \fBmb_get\fP(\fImbio_ptr\fP, \fIpingavg\fP, \fItime_i\fP, \fItime_d\fP, 
\fInavlon\fP, \fInavlat\fP, \fIspeed\fP, \fIheading\fP, \fIrange\fP, 
\fInbath\fP, \fIbath\fP, \fIbathdist\fP,  
\fInback\fP, \fIback\fP, \fIbackdist\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int *\fIpingavg\fP;
.br
int \fItime_i\fP[6];
.br
double *\fItime_d\fP;
.br
double *\fInavlon\fP;
.br
double *\fInavlat\fP;
.br
double *\fIspeed\fP;
.br
double *\fIheading\fP;
.br
double *\fIrange\fP;
.br
int *\fInbath\fP;
.br
double *\fIbath\fP;
.br
double *\fIbathdist\fP;
.br
int *\fInback\fP;
.br
double *\fIback\fP;
.br
double *\fIbackdist\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_get\fP reads, processes, and returns multibeam
data according to the mbio descriptor pointed to by \fImbio_ptr\fP.
The data is in the form of bathymetry and backscatter values combined
with the crosstrack distances of the bathymetry and backscatter 
measurements.
The return values are:
 	\fIpingavg\fP:		number of pings averaged to give current data;
 			other values will be averaged if pingavg > 1
 	\fItime_i\fP:		time of current ping
 			\fItime_i\fP[0]: year
 			\fItime_i\fP[1]: month
 			\fItime_i\fP[2]: day
 			\fItime_i\fP[3]: hour
 			\fItime_i\fP[4]: minute
 			\fItime_i\fP[5]: second
 	\fItime_d\fP:		time of current ping in minutes since 1/1/81 00:00:00
 	\fInavlon\fP:		longitude
 	\fInavlat\fP:		latitude
 	\fIspeed\fP:		ship speed in km/s
 	\fIheading\fP:		ship heading in degrees
 	\fIrange\fP:		distance along shiptrack since beginning of data in km
 	\fInbath\fP:		number of bathymetry values
 	\fIbath\fP:		array of bathymetry values in meters
 	\fIbathdist\fP:		array of of crosstrack distances in meters
 			corresponding to bathymetry
 	\fInback\fP:		number of backscatter values
 	\fIback\fP:		array of backscatter values in unknown units
 	\fIbackdist\fP:	array of of crosstrack distances in meters
 			corresponding to backscatter
 	\fIerror\fP:		error value
.br
A status value indicating success or failure is returned; the error value
argument \fIerrorr\fP passes more detailed information about 
read failures. 
.RE
.IP
int \fBmb_read_close\fP(\fImbio_ptr\fP)
.br
char *\fImbio_ptr\fP;
.RS 10
Closes the data file listed in the mbio descriptor pointed to 
by \fImbio_ptr\fP and releases all specially allocated memory.  A return
status value signals success or failure.
.RE
.IP
int \fBmb_write_init\fP(\fIfile\fP, \fIformat_id\fP, 
\fImbio_ptr\fP, \fIbeams_bath\fP, \fIbeams_back\fP, \fIerror\fP)
.br
char *\fIfile\fP;
.br
int *\fIformat_id\fP;
.br
int *\fIverbose\fP;
.br
char *\fImbio_ptr\fP;
.br
int *\fIbeams_bath\fP;
.br
int *\fIbeams_back\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_write_init\fP initializes the data file to be written 
and the data structures required for writing the data. 
In addition to the
output filename \fIfile\fP, the format identifier \fIformat_id\fP
specifies the output data format and the verbosity flag \fIverbose\fP
determines what kind of informational messages are output to standard
error (see the CONTROL PARAMETERS section).
The returned values are:
 	\fImbio_ptr\fP:	pointer to a structure describing the output file
 	\fIbeams_bath\fP:	maximum number of bathymetry beams
 	\fIbeams_back\fP:	maximum number of backscatter beams
 	\fIerror\fP:		error value
.br
The structure pointed to by
\fImbio_ptr\fP holds the output file descriptor; this pointer must be 
provided to
the functions \fBmb_write\fP or \fBmb_put\fP to write data. The values 
\fIbeams_bath\fP
and \fIbeams_back\fP return the maximum number of bathymetry and backscatter
beams that the specified data format may contain.  In order to successfully
write data, the calling program must
provide pointers to arrays large enough to hold \fIbeams_bath\fP bathymetry
values and \fIbeams_back\fP backscatter variables.
A status value indicating success or failure is returned; an error value
argument passes more detailed information about initialization failures. 
.RE
.IP
int \fBmb_write\fP(\fImbio_ptr\fP, \fItime_i\fP, \fItime_d\fP, 
\fInavlon\fP, \fInavlat\fP, \fIspeed\fP, \fIheading\fP, 
\fInbath\fP, \fIbath\fP, \fIbathlon\fP, \fIbathlat\fP, 
\fInback\fP, \fIback\fP, \fIbacklon\fP, \fIbacklat\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int \fItime_i\fP[6];
.br
double *\fItime_d\fP;
.br
double *\fInavlon\fP;
.br
double *\fInavlat\fP;
.br
double *\fIspeed\fP;
.br
double *\fIheading\fP;
.br
int *\fInbath\fP;
.br
double *\fIbath\fP;
.br
double *\fIbathlon\fP;
.br
double *\fIbathlat\fP;
.br
int *\fInback\fP;
.br
double *\fIback\fP;
.br
double *\fIbacklon\fP;
.br
double *\fIbacklat\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_write\fP writes multibeam data to the file listed
in the mbio descriptor pointed to by \fImbio_ptr\fP.
The data is in the form of bathymetry and backscatter values combined
with the longitude and latitude locations of the bathymetry and 
backscatter measurements.
The values to be output are:
 	\fItime_i\fP:		time of current ping (used if \fItime_i\fP[0] != 0)
 			\fItime_i\fP[0]: year
 			\fItime_i\fP[1]: month
 			\fItime_i\fP[2]: day
 			\fItime_i\fP[3]: hour
 			\fItime_i\fP[4]: minute
 			\fItime_i\fP[5]: second
 	\fItime_d\fP:		time of current ping in minutes since 
 				1/1/81 00:00:00 (used if \fItime_i\fP[0] = 0)
 	\fInavlon\fP:		longitude
 	\fInavlat\fP:		latitude
 	\fIspeed\fP:		ship speed in km/s
 	\fIheading\fP:		ship heading in degrees
 	\fInbath\fP:		number of bathymetry values
 	\fIbath\fP:		array of bathymetry values in meters
 	\fIbathlon\fP:		array of of longitude values corresponding 
 			to bathymetry
 	\fIbathlat\fP:		array of of latitude values corresponding 
 			to bathymetry
 	\fInback\fP:		number of backscatter values
 	\fIback\fP:		array of backscatter values in meters
 	\fIbacklon\fP:		array of of longitude values corresponding 
 			to backscatter
 	\fIbacklat\fP:		array of of latitude values corresponding 
 			to backscatter
.br
A status value indicating success or failure is returned; the error value
argument \fIerrorr\fP passes more detailed information about 
write failures. 
.RE
.IP
int \fBmb_put\fP(\fImbio_ptr\fP, \fItime_i\fP, \fItime_d\fP, 
\fInavlon\fP, \fInavlat\fP, \fIspeed\fP, \fIheading\fP,  
\fInbath\fP, \fIbath\fP, \fIbathdist\fP,  
\fInback\fP, \fIback\fP, \fIbackdist\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int \fItime_i\fP[6];
.br
double *\fItime_d\fP;
.br
double *\fInavlon\fP;
.br
double *\fInavlat\fP;
.br
double *\fIspeed\fP;
.br
double *\fIheading\fP;
.br
int *\fInbath\fP;
.br
double *\fIbath\fP;
.br
double *\fIbathdist\fP;
.br
int *\fInback\fP;
.br
double *\fIback\fP;
.br
double *\fIbackdist\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmb_put\fP writes multibeam data to the file listed
in the mbio descriptor pointed to by \fImbio_ptr\fP.
The data is in the form of bathymetry and backscatter values combined
with the crosstrack distances of the bathymetry and backscatter 
measurements.
The values to be output are:
 	\fIpingavg\fP:		number of pings averaged to give current data;
 			other values will be averaged if pingavg > 1
 	\fItime_i\fP:		time of current ping (used if \fItime_i\fP[0] != 0)
 			\fItime_i\fP[0]: year
 			\fItime_i\fP[1]: month
 			\fItime_i\fP[2]: day
 			\fItime_i\fP[3]: hour
 			\fItime_i\fP[4]: minute
 			\fItime_i\fP[5]: second
 	\fItime_d\fP:		time of current ping in minutes since 
 				1/1/81 00:00:00 (used if \fItime_i\fP[0] = 0)
 	\fInavlon\fP:		longitude
 	\fInavlat\fP:		latitude
 	\fIspeed\fP:		ship speed in km/s
 	\fIheading\fP:		ship heading in degrees
 	\fIrange\fP:		distance along shiptrack since beginning of data in km
 	\fInbath\fP:		number of bathymetry values
 	\fIbath\fP:		array of bathymetry values in meters
 	\fIbathdist\fP:		array of of crosstrack distances in meters
 			corresponding to bathymetry
 	\fInback\fP:		number of backscatter values
 	\fIback\fP:		array of backscatter values in unknown units
 	\fIbackdist\fP:	array of of crosstrack distances in meters
 			corresponding to backscatter
.br
A status value indicating success or failure is returned; the error value
argument \fIerrorr\fP passes more detailed information about 
write failures. 
.RE
.IP
int \fBmb_write_close\fP(\fImbio_ptr\fP)
.br
char *\fImbio_ptr\fP;
.RS 10
Closes the data file listed in the mbio descriptor pointed to 
by \fImbio_ptr\fP and releases all specially allocated memory.  A return
status value signals success or failure.
.RE
.IP
int \fBmbr_read_init\fP(\fIfile\fP, \fIformat_id\fP, \fIverbose\fP, 
\fImbio_ptr\fP, \fIerror\fP)
.br
char *\fIfile\fP;
.br
int *\fIformat_id\fP;
.br
int *\fIverbose\fP;
.br
char *\fImbio_ptr\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmbr_read_init\fP initializes the data file to be read 
and the data structures required for reading the data. 
In addition to the
input filename \fIfile\fP, the format identifier \fIformat_id\fP
specifies the input data format and the verbosity flag \fIverbose\fP
determines what kind of informational messages are output to standard
error (see the CONTROL PARAMETERS section).
The returned values are:
 	\fImbio_ptr\fP:	pointer to a structure describing the input file
 	\fIerror\fP:		error value
.br
The structure pointed to by
\fImbio_ptr\fP  must be provided to
the function \fBmbr_read\fP to read data. 
A status value indicating success or failure is returned; an error value
argument passes more detailed information about initialization failures. 
.RE
.IP
char *\fBmbr_read\fP(\fImbio_ptr\fP, \fIdata_id\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int *\fIdata_id\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmbr_read\fP reads multibeam
data according to the mbio descriptor pointed to by \fImbio_ptr\fP
and returns a pointer to a structure holding the data.
The return values are:
 	\fIdata_id\fP:		identifies which data structure is returned
 	\fIerror\fP:		error value
.br
Success or failure is indicated by whether the pointer returned is
valid (success) or NULL (failure); the error value
argument \fIerrorr\fP passes more detailed information about 
read failures. 
.RE
.IP
int \fBmbr_read_close\fP(\fImbio_ptr\fP)
.br
char *\fImbio_ptr\fP;
.RS 10
Closes the data file listed in the mbio descriptor pointed to 
by \fImbio_ptr\fP and releases all specially allocated memory.  A return
status value signals success or failure.
.RE
.IP
int \fBmbr_write_init\fP(\fIfile\fP, \fIformat_id\fP, \fIverbose\fP, 
\fImbio_ptr\fP, \fIerror\fP)
.br
char *\fIfile\fP;
.br
int *\fIformat_id\fP;
.br
int *\fIverbose\fP;
.br
char *\fImbio_ptr\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmbr_write_init\fP initializes the data file to be written 
and the data structures required for writing the data. 
In addition to the
output filename \fIfile\fP, the format identifier \fIformat_id\fP
specifies the output data format and the verbosity flag \fIverbose\fP
determines what kind of informational messages are output to standard
error (see the CONTROL PARAMETERS section).
The returned values are:
 	\fImbio_ptr\fP:	pointer to a structure describing the output file
 	\fIerror\fP:		error value
.br
The structure pointed to by
\fImbio_ptr\fP holds the output file descriptor; this pointer must be 
provided to
the function \fBmbr_write\fP to write data. 
A status value indicating success or failure is returned; an error value
argument passes more detailed information about initialization failures. 
.RE
.IP
int \fBmbr_write\fP(\fImbio_ptr\fP, \fIdata_id\fP, \fIdata_ptr\fP, \fIerror\fP)
.br
char *\fImbio_ptr\fP;
.br
int \fIdata_id\fP[6];
.br
double *\fIdata_ptr\fP;
.br
int *\fIerror\fP;
.RS 10
The function \fBmbr_write\fP writes multibeam data to the file listed
in the mbio descriptor pointed to by \fImbio_ptr\fP.
The data is stored in a structure pointed to by \fIdata_ptr\fP; \fIdata_id\fP
identifies which data structure is used.
A status value indicating success or failure is returned; the error value
argument \fIerrorr\fP passes more detailed information about 
write failures. 
.RE
.IP
int \fBmbr_write_close\fP(\fImbio_ptr\fP)
.br
char *\fImbio_ptr\fP;
.RS 10
Closes the data file listed in the mbio descriptor pointed to 
by \fImbio_ptr\fP and releases all specially allocated memory.  A return
status value signals success or failure.

.SH EXAMPLES
Gosh, it should be obvious...

.SH BUGS
Gotta be some, that's just life...
