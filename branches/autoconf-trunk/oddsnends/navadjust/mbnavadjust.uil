/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Personal Edition Version 5.0.5.
 *
 * Identification: $Id: mbnavadjust.uil,v 1.1 2003-07-29 01:49:36 dale Exp $
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-L /usr/X11/lib -lXm -lXt -lX11 -lm")
!(BX) bx_info("c_cflags", "")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "mbnavadjust")
!(BX) bx_info("c_information", "")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "true")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "false")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "mbnavadjust")
!(BX) bx_info("c_class", "mbnavadjust")
!(BX) bx_info("c_app_defaults", "mbnavadjust_appdefaults", true)
!(BX) bx_info("c_utilities", "mbnavadjust_util.c", true)
!(BX) bx_info("c_constants", "mbnavadjust_creation.h", true)
!(BX) bx_info("c_callbacks", "mbnavadjust_callbacks.c", true)
!(BX) bx_info("c_creation", "mbnavadjust_creation.c", true)
!(BX) bx_info("c_main", "mbnavadjust.c", true)
!(BX) bx_info("c_makefile", "Makefile.org", true)
!(BX) bx_info("c_imakefile", "Imakefile", false)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("system_directory", "/opt/bxpro-5.0")
!(BX) bx_info("builder_version", "Builder Xcessory Personal Edition Version 5.0.5")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

procedure BxGlobalWidgetId;
identifier BXG_pushButton_invertnav;
identifier BXG_pushButton_analyzecrossings;
identifier BXG_pushButton_showcrossings;
identifier BXG_pushButton_showdata;
identifier BXG_pushButton_quit;
identifier BXG_pushButton_close;
identifier BXG_pushButton_importdata;
identifier BXG_pushButton_removedata;
identifier BXG_pushButton_open;
identifier BXG_pushButton_new;
identifier BXG_text_messages;
identifier BXG_scrolledWindow_messages;
identifier BXG_list_data;
identifier BXG_scrolledWindow_datalist;
identifier BXG_label_about_version;
identifier BXG_label_message;
identifier BXG_bulletinBoard_message;
identifier BXG_label_error_two;
identifier BXG_label_error_one;
identifier BXG_label_error_three;
identifier BXG_bulletinBoard_error;
identifier BXG_textField_format;
identifier BXG_label_format;
identifier BXG_fileSelectionBox;
identifier BXG_bulletinBoard_fileselection;
identifier BXG_xmDialogShell_fileselection;
procedure BxManageCB(string);
procedure BxUnmanageCB(string);
procedure BxSetValuesCB(string);
procedure BxExitCB(integer);
procedure do_fileselection_cancel();
procedure do_fileselection_ok();
procedure do_fileselection_filter();
procedure do_fileselection_nomatch();
procedure do_quit();
procedure do_file_new();
procedure do_file_open();
procedure do_file_close();
procedure do_file_removedata();
procedure do_view_showdata();
procedure do_view_showcrossings();
procedure do_action_findcrossings();
procedure do_action_analyzecrossings();
procedure do_action_invertnav();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list Style_use : arguments {
        arguments BaseStyle;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list Style_useReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list Style_useHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


object fileSelectionBox : XmFileSelectionBox widget {
    arguments {
        XmNdialogTitle = compound_string("");
        XmNlistVisibleItemCount = 12;
        XmNtextFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNbuttonFontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNautoUnmanage = false;
        XmNnoResize = true;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 590;
        XmNheight = 470;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
       XmNokCallback = procedures {
                 do_fileselection_ok();
                 BxUnmanageCB("bulletinBoard_fileselection");
        };
        XmNnoMatchCallback = procedure do_fileselection_nomatch();
       XmNcancelCallback = procedures {
                 do_fileselection_cancel();
                 BxUnmanageCB("bulletinBoard_fileselection");
        };
        XmNapplyCallback = procedure do_fileselection_filter();
    };
};

object label_format : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNlabelString = compound_string("MBIO Format ID:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 480;
        XmNwidth = 150;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_format);
    };
};

object textField_format : XmTextField widget {
    arguments {
        XmNfontList = font_table(
		font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1'));
        XmNx = 160;
        XmNy = 480;
        XmNwidth = 100;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_format);
    };
};

object bulletinBoard_fileselection : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 345;
        XmNy = 50;
        XmNwidth = 611;
        XmNheight = 532;
    };
    controls {
         managed XmTextField textField_format;
         managed XmLabel label_format;
         managed XmFileSelectionBox fileSelectionBox;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_fileselection);
    };
};

!(BX)object xmDialogShell_fileselection : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Select Input Data File";
!(BX)        XmNallowShellResize = false;
!(BX)        XmNwidth = 611;
!(BX)        XmNheight = 532;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_fileselection;
!(BX)    };
!(BX)    callbacks {
!(BX)        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xmDialogShell_fileselection);
!(BX)    };
!(BX)};

object pushButton_error : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("OK");
        XmNx = 110;
        XmNy = 110;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_three : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("permission in this directory!");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_three);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unable to open output file.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_one);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("You probably do not have write");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_two);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_error : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 495;
        XmNy = 102;
        XmNwidth = 311;
        XmNheight = 161;
    };
    controls {
         managed XmLabel label_error_two;
         managed XmLabel label_error_one;
         managed XmLabel label_error_three;
         managed XmPushButton pushButton_error;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_error);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_error : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Error";
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 161;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_error;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object label_message : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("MBnavadjust is loading data...");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_pleasewait : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Thank you for your patience.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_message : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 461;
        XmNy = 140;
        XmNwidth = 379;
        XmNheight = 86;
    };
    controls {
         managed XmLabel label_pleasewait;
         managed XmLabel label_message;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_message : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Please Wait...";
!(BX)        XmNmwmInputMode = MWM_INPUT_MODELESS;
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 379;
!(BX)        XmNheight = 86;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_message;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_about_mbedit : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MBnavadjust");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_function : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Interactive Navigation Adjustmen" &
 "t of Swath Bathymetry");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 450;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_version : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-medium-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System Release 4.6", separate=true) &
 compound_string("April 14, 1999");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 360;
        XmNwidth = 450;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_about_version);
    };
};

object separator : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 480;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_for : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("for Processing and Display of Sw" &
 "ath Sonar Data");
        XmNx = 10;
        XmNy = 190;
        XmNwidth = 460;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_component : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("One Component of the");
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbpub : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("A Public Domain Software Package" &
 "");
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbsystem : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System");
        XmNx = 10;
        XmNy = 120;
        XmNwidth = 450;
        XmNheight = 38;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_columbia : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Monterey Bay", separate=true) &
 compound_string("Aquarium", separate=true) &
 compound_string("Research Institute");
        XmNx = 60;
        XmNy = 290;
        XmNwidth = 160;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_lamont : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Lamont-Doherty ", separate=true) &
 compound_string("Earth Observatory", separate=true) &
 compound_string("of Columbia University");
        XmNx = 250;
        XmNy = 290;
        XmNwidth = 190;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Created by:", separate=true) &
 compound_string("David W. Caress    and    Dale N. Chayes");
        XmNx = 10;
        XmNy = 240;
        XmNwidth = 450;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_about_dismiss : XmPushButton widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Dismiss");
        XmNx = 190;
        XmNy = 420;
        XmNwidth = 90;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_about");
    };
};

object separator1 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 220;
        XmNwidth = 480;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard_about : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 410;
        XmNy = 50;
        XmNwidth = 481;
        XmNheight = 466;
    };
    controls {
         managed XmSeparator separator1;
         managed XmPushButton pushButton_about_dismiss;
         managed XmLabel label_about_create;
         managed XmLabel label_about_lamont;
         managed XmLabel label_about_columbia;
         managed XmLabel label_about_mbsystem;
         managed XmLabel label_about_mbpub;
         managed XmLabel label_about_component;
         managed XmLabel label_about_for;
         managed XmSeparator separator;
         managed XmLabel label_about_version;
         managed XmLabel label_about_function;
         managed XmLabel label_about_mbedit;
    };
    callbacks {
    };
};

!(BX)object xmDialogShell_about : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "About MBnavadjust";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 481;
!(BX)        XmNheight = 466;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_about;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object list_data : XmList widget {
    arguments {
        XmNwidth = 360;
        XmNheight = 110;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_list_data);
    };
};

object scrolledWindow_datalist : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 360;
        XmNheight = 110;
    };
    controls {
         managed XmList list_data;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scrolledWindow_datalist);
    };
};

object text_messages : XmText widget {
    arguments {
        XmNeditMode = XmMULTI_LINE_EDIT;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_text_messages);
    };
};

object scrolledWindow_messages : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 430;
        XmNy = 10;
        XmNwidth = 410;
        XmNheight = 100;
    };
    controls {
         managed XmText text_messages;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scrolledWindow_messages);
    };
};

object bulletinBoard_mbnavadjust : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_ANY;
        XmNwidth = 850;
        XmNheight = 130;
    };
    controls {
         managed XmScrolledWindow scrolledWindow_messages;
         managed XmScrolledWindow scrolledWindow_datalist;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_new : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("New");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_new);
        XmNactivateCallback = procedure do_file_new();
    };
};

object pushButton_open : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Open");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_open);
        XmNactivateCallback = procedure do_file_open();
    };
};

object pushButton_removedata : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Remove Swath Data");
        XmNpositionIndex = 4;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_removedata);
        XmNactivateCallback = procedure do_file_removedata();
    };
};

object pushButton_importdata : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Import Swath Data");
        XmNpositionIndex = 5;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_importdata);
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselection");
                 BxSetValuesCB("label_format.labelString=MBIO F" &
 "ormat ID:");
        };
    };
};

object pushButton_close : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Close");
        XmNpositionIndex = 2;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_close);
        XmNactivateCallback = procedure do_file_close();
    };
};

object pushButton_quit : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Quit");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_quit);
       XmNactivateCallback = procedures {
                 do_quit();
                 BxExitCB(0);
        };
    };
};

object separator2 : XmSeparator widget {
    arguments {
        XmNpositionIndex = 7;
    };
    controls {
    };
    callbacks {
    };
};

object separator3 : XmSeparator widget {
    arguments {
        XmNpositionIndex = 3;
    };
    controls {
    };
    callbacks {
    };
};

object pulldownMenu_file : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 125;
        XmNheight = 140;
    };
    controls {
         managed XmPushButton pushButton_new;
         managed XmPushButton pushButton_open;
         managed XmPushButton pushButton_removedata;
         managed XmPushButton pushButton_importdata;
         managed XmPushButton pushButton_close;
         managed XmPushButton pushButton_quit;
         managed XmSeparator separator2;
         managed XmSeparator separator3;
    };
    callbacks {
    };
};

object cascadeButton_file : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("File");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 37;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_file;
    };
    callbacks {
    };
};

object pushButton_showdata : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Show Data Files");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_showdata);
        XmNactivateCallback = procedure do_view_showdata();
    };
};

object pushButton_showcrossings : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Show Crossings");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_showcrossings);
        XmNactivateCallback = procedure do_view_showcrossings();
    };
};

object pulldownMenu_view : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 104;
        XmNheight = 48;
    };
    controls {
         managed XmPushButton pushButton_showdata;
         managed XmPushButton pushButton_showcrossings;
    };
    callbacks {
    };
};

object cascadeButton_view : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("View");
        XmNx = 42;
        XmNy = 5;
        XmNwidth = 44;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_view;
    };
    callbacks {
    };
};

object pushButton_findcrossings : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Find Crossings");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure do_action_findcrossings();
    };
};

object pushButton_analyzecrossings : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Analyze Crossings");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_analyzecrossings);
        XmNactivateCallback = procedure do_action_analyzecrossings();
    };
};

object pushButton_invertnav : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Invert Navigation");
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_invertnav);
        XmNactivateCallback = procedure do_action_invertnav();
    };
};

object pulldownMenu_action : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 117;
        XmNheight = 70;
    };
    controls {
         managed XmPushButton pushButton_findcrossings;
         managed XmPushButton pushButton_analyzecrossings;
         managed XmPushButton pushButton_invertnav;
    };
    callbacks {
    };
};

object cascadeButton_action : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("Action");
        XmNx = 86;
        XmNy = 5;
        XmNwidth = 52;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_action;
    };
    callbacks {
    };
};

object pushButton_about : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("About");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_about");
    };
};

object pulldownMenu_about : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 45;
        XmNheight = 26;
    };
    controls {
         managed XmPushButton pushButton_about;
    };
    callbacks {
    };
};

object cascadeButton_about : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("About");
        XmNx = 796;
        XmNy = 5;
        XmNwidth = 49;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_about;
    };
    callbacks {
    };
};

object menuBar_mbnavadjust : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton cascadeButton_about;
        XmNwidth = 850;
        XmNheight = 32;
    };
    controls {
         managed XmCascadeButton cascadeButton_file;
         managed XmCascadeButton cascadeButton_view;
         managed XmCascadeButton cascadeButton_action;
         managed XmCascadeButton cascadeButton_about;
    };
    callbacks {
    };
};

object mainWindow : XmMainWindow widget {
    arguments {
        XmNx = 222;
        XmNy = 78;
        XmNwidth = 850;
        XmNheight = 162;
    };
    controls {
!(BX)         unmanaged XmDialogShell xmDialogShell_fileselection;
!(BX)         unmanaged XmDialogShell xmDialogShell_error;
!(BX)         unmanaged XmDialogShell xmDialogShell_message;
!(BX)         unmanaged XmDialogShell xmDialogShell_about;
         managed XmBulletinBoard bulletinBoard_mbnavadjust;
         managed XmMenuBar menuBar_mbnavadjust;
    };
    callbacks {
    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "MBnavadjust";
!(BX)        XmNiconName = "MBnavadjust";
!(BX)        XmNx = 218;
!(BX)        XmNy = 54;
!(BX)        XmNwidth = 850;
!(BX)        XmNheight = 162;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)        XmNdestroyCallback = procedure BxExitCB(0);
!(BX)    };
!(BX)};
end module;
