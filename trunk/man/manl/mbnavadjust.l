.TH mbnavadjust l "27 August 2002" "MB-System 5.0" "MB-System 5.0"
.SH NAME
\fBmbnavadjust\fP - Package that solves for optimal navigation by
matching bathymetry of overlapping swathes.

.SH VERSION
Version 5.0

.SH SYNOPSIS
\fBmbnavadjust\fP [\fB-V -H\fP] 

.SH DESCRIPTION
\fBMBnavadjust\fP is an interactive graphical program used to
adjust swath data navigation by matching bathymetric features
in overlapping and crossing swathes. The primary purpose of
\fBmbnavadjust\fP is to eliminate relative navigational errors in swath
data obtained from poorly navigated sonars. Submerged platforms
such as towed vehicles, remotely operated vehicles (ROVs) and
autonomous underwater vehicles (AUVs) are frequently not navigated 
with accuracy equivalent to the lateral resolution of 
swath bathymetry obtained with high frequency sonars operated
close to the seafloor. This is  particularly true for systems
that depend on ultra-short baseline navigation (USBL) or on
inertial navigation (as opposed to long baseline (LBL) navigation
obtained using transponder networks). Many old, 
pre-GPS surveys with hull mounted
sonars also suffer from poor navigation relative to the resolution
of the swath bathymetry, and can thus be improved with application
of this tool. \fBMBnavadjust\fP also works
well to co-register surveys at different scales. For instance, our
initial use of this tool involved co-registering a deep-towed Reson
8101 multibeam survey of the Loihi Seamount summit (offshore Hawaii)
with a hull mounted Simrad EM300 multibeam survey. 

When swath surveys are poorly navigated, features clearly imaged
by the sonar may not match in overlapping and crossing swathes.
However, by systematically determining the lateral offsets between
matching features throughout a survey, it is possible to solve,
or invert, for a navigation model which is consistent with the
original navigational constraints, satisfies the requirement
of reasonableness, and also causes features in overlapping swathes
to match within the sonar's resolution. 

Previous attempts to address this problem (e.g. Nishimura et al. [1988])
have focused on automating the identification of matching features
and their navigational offsets. The automated approach is 
problematic because seafloor features are complex, and the
cross correlation function of matching features often exhibits
multiple local minima. Our approach is to automate the identification
of matching features and the ultimate solution for an optimal
indentification while depending on interactive determination of
the navigational offsets. We have not found an automatic algorithm
that can reliably replace the human eye and brain in correctly 
lining up real seafloor features.

\fBMBnavadjust\fP operates within the context of the \fBmbprocess\fP
parallel processing scheme, but it should used on data for which
the initial navigation processing (e.g. \fBmbnavedit\fP is complete.
When swath data files are imported into \fBmbnavadjust\fP, the data is
taken from processed files generated by \fBmbprocess\fP whenever
possible (when those files exist). If no processed file exists,
the raw data is used. When the processing with \fBmbnavadjust\fP
is completed and an optimal navigation solution is achieved, new
navigation files are generated (".na#" files, see below for full
description) which supercede the ".nve" files
generated by \mbnavedit\fP. Rerunning \fBmbprocess\fP will merge
the new navigation into a new set of processed files. Once
a swath file is processed with \fmbnavadjust\fP, any further attempts
to process the navigation with \fBmbnavedit\fP will only produce
navigation files that are ignored by \fBmbprocess\fP. This behavior
can be reversed manually using \fBmbset\fP, but then the user will
unnecessarily complicating his or her efforts.

The inversion for an optimal navigation which fits the offsets identified
at matching features must also be reasonable. This is achieved by
minimizing perturbations to speed and acceleration in the inversion.
This approach of penalizing first and second derivatives within
a linear inverse problem is common within the geophysical
inverse theory literature (e.g. Parker [1994]).

Users are advised that \fBmbnavadjust\fP is complicated in both
conception and implementation. We strongly recommend that users
read all of the documentation provided below prior to attempting
a first use of this software.
The meaning and use of the individual widgets and windows employed in
the graphical interface is provided in the \fBINTERACTIVE CONTROLS\fP
section. The \fBUSING MBNAVADJUST\fP section provides a more coherent 
discussion of how to use \fBmbnavadjust\fP, how this program interacts
with the \fBmbprocess\fP parallel processing scheme, and the underlying
concepts and algorithms.

.SH AUTHORSHIP
David W. Caress (caress@mbari.org)
.br
  Monterey Bay Aquarium Research Institute
.br
Dale N. Chayes (dale@ldeo.columbia.edu)
.br
  Lamont-Doherty Earth Observatory

.SH OPTIONS
.TP
.B \-H
This "help" flag cause the program to print out a description
of its operation and then exit immediately.
.TP
.B \-V
Normally, \fBmbnavadjust\fP outputs nothing to the stderr stream.
If the \fB-V\fP flag is given, then \fBmbnavadjust\fP 
works in a "verbose" mode and
outputs the program version being used, all error status messages, 
and a large amount of other information.

.SH INTERACTIVE CONTROLS

.SS MBnavadjust Window
This is the primary window of \fBmbnavadjust\fP.

.TP
.B File
This button activates a pulldown menu with six items:
\fBNew\fP, \fBOpen\fP, \fBClose\fP, 
\fBImport Swath Data\fP, and \fBQuit\fP. 

.TP
.B File->New
This menu item brings up a popup window which allows the user to
specify a new \fBmbnavadjust\fP project. As part of initializing
a new project, \fBmbnavadjust\fP creates a file with a ".nvh"
suffix and a directory with a ".dir" suffix.
.TP
.B File->Open
This menu item brings up a popup window which allows the user to
open an existing \fBmbnavadjust\fP project.
.TP
.B File->Close
This menu item causes \fBmbnavadjust\fP to close the current project.
.TP
.B File->Import Swath Data
This menu item brings up a popup window which allows the user to
specify a swath sonar data file or a list of 
swath files to be imported into the current
\fBmbnavadjust\fP project.
This program uses the \fBMBIO\fP library and 
will read any swath sonar 
formats supported by \fBMBIO\fP. A list of the swath sonar data
formats currently supported by \fBMBIO\fP and their
identifier values is given in the \fBMBIO\fP manual page. 
If the swath sonar data file is named using the \fBMB-System\fP
suffix convention (format 11 files end with ".mb11", format
41 files end with ".mb41", etc.), then the program will
automatically use the appropriate format id; otherwise the
format must be set by the user in the format text box.
.TP
.B File->Quit
This button causes \fBmbnavadjust\fP to quit. If a project has been
created or opened, that project will be closed before the program
quits.
.TP
.B Option
This button brings up a pulldown menu with one item: \fBControls\fP.
.TP
.B Option->Controls
This menu item brings up a dialog window with several slider widgets
that set parameters controlling how swath data are imported and displayed.
These widgets are discussed in the \fBControls\fP section below.
 .TP
.B View
This button brings up a pulldown menu with three items: 
\fBShow Data Files\fP, \fBShow Crossings\fP, and \fBShow Ties\fP
This menu controls the contents of the list widget in the lower
right \fBMBnavadjust Window\fP. If an \fBmbnavadjust\fP project
has been created or opened, the \fBData Table\fP list 
widget will display one of
the three tables named by these menu items, and the corresponding
menu item will be disabled. Selection of either of the other two
items will change what is displayed in the \fBData Table\fP list
widget accordingly.
.TP
.B View->Show Data Files
This menu item causes the \fBData Table\fP list widget to display a list of the swath
data files in the current \fBmbnavadjust\fP project. 
.TP
.B View->Show Crossings
This menu item causes the \fBData Table\fP list widget to display a list of the swath
crossings in the current \fBmbnavadjust\fP project. 
.TP
.B View->Show Ties
This menu item causes the \fBData Table\fP list widget to display a list of the tie points
in the current \fBmbnavadjust\fP project. 
.TP
.B Action
This button brings up a pulldown menu with four items: 
\fBFix File\fP, \fBUnfix File\fP, \fBAnalyze Crossings\fP, 
and \fBInvert Navigation\fP
This menu controls the contents of the list widget in the lower
right \fBMBnavadjust Window\fP. If an \fBmbnavadjust\fP project
has been created or opened, the \fBData Table\fP list 
widget will display one of
the three tables named by these menu items, and the corresponding
menu item will be disabled. Selection of either of the other two
items will change what is displayed in the \fBData Table\fP list
widget accordingly.
.TP
.B Action->Fix File
This menu item causes \fBmbnavadjust\fP to treat the navigation of
a selected swath data file as fixed. This option is only activated
when the \fBData Table\fP list widget shows a list of the imported
swath files and one currently unfixed file has been selected by
clicking in that list.
.TP
.B Action->Unfix File
This menu item causes \fBmbnavadjust\fP to treat the navigation of
a selected swath data file as unfixed. This option is only activated
when the \fBData Table\fP list widget shows a list of the imported
swath files and one currently fixed file has been selected by
clicking in that list.
.TP
.B Action->Analyze Crossings
This menu item causes \fBmbnavadjust\fP to load and display the first
crossing in the "Nav Err" window.
.TP
.B Action->Invert Navigation
This menu item causes \fBmbnavadjust\fP to invert for an optimal
navigation solution that fits the offsets defined at the navigation
tie points while minimizing speed and acceleration. This option is
only activated when all of the crossings in the current
\fBmbnavadjust\fP project have been analyzed interactively.
.TP
.B About
This button brings up a pulldown menu with one item: \fBAbout\fP.
.TP
.B About->About
This menu item brings up a popup window that displays the program's
name, authors, and version. Clicking the \fBDismiss\fP button will
close the window.
.TP
.B Data Table
This list widget displays one of three tables of information regarding
the current \fBmbnavadjust\fP project. These tables are a list of the
imported swath data files, a list of the identified crossing swathes, and
a list of the navigation tie points defined interactively by the user.
The \fBView\fP pulldown menu allows the user to set which table is displayed.

The file list will look something like:
.br
 0   15  free  0.0  0.0 mbari_1998_53.mb57
 1    4  free  0.0  0.0 mbari_1998_54.mb57
 2    2  free  0.0  0.0 mbari_1998_55.mb57
 3    2  free  0.0  0.0 mbari_1998_56.mb57
 4   16  free  0.0  0.0 mbari_1998_57.mb57
 5    4 fixed  0.0  0.0 mbari_1998_58.mb57
 6    3  free  0.0  0.0 mbari_1998_59.mb57
 7    3  free  0.0  0.0 mbari_1998_60.mb57
 8   13  free  0.0  0.0 mbari_1998_61.mb57
.br
Here the first column is the file counter and the second is
the number of sections extracted from this file. The third
column normally is "free", but may show "fixed" if the navigation
for a file has been set to be fixed (this forces \fBmbnavadjust\fP 
to adjust the other swath data navigation relative to that of the
fixed file or files).The fourth and fifth columns show any heading
or roll bias offsets in degrees applied to the swath data for that file. 
The sixth column gives the name of the swath data file imported into
\fBmbnavadjust\fP. Note that the name shown here is that of the "raw"
swath file. The data imported by \fBmbnavadjust\fP is, 
if possible, extracted from a "processed" swath file 
generated by \fBmbprocess\fP rather than the
associated "raw" file.

The crossing list will look something like:
.br
 *    0 001:000 000:013  1
 -    1 001:001 000:013  0
 *    2 002:000 001:002  3
 *    3 002:001 001:000  1
 *    4 002:001 001:001  1
 U    5 002:001 001:002  0
 *    6 004:000 003:001  1
.br
Here the first column indicates the processing status for the
crossing. If the status flag is "U", then no tie points have been
set for the crossing, but the crossing has also not been explicitely
skipped. New crossings always show a "U" flag prior to being
inspected by a user. The second column is the crossing counter. The
third and fourth columns identify the swath data sections that overlap
in this crossing. Each are identified by their file id and section id
separated by ":". The fifth, and last column gives the number of tie
points that have been defined for each crossing. New crossings always
begin with 0 tie points prior to be inspected by a user.

The tie point list will look something like:
.br
    0  0 001:000:01 000:013:03     0.00     0.00     0.56    -0.30
    2  0 002:000:04 001:002:03   -19.47   -25.96     5.66    15.07
    2  1 002:000:06 001:002:01   -12.97     6.49     1.04    -3.37
    2  2 002:000:05 001:002:02   -12.97     6.49    -0.09    -7.26
    3  0 002:001:04 001:000:00     0.00     0.00    -1.87     0.91
    4  0 002:001:02 001:001:02    -6.41     6.41    -0.59    -1.93
    6  0 004:000:02 003:001:01     0.00     0.00     0.00    -0.62
.br
Here the first column indicates the crossing which contains the tie point,
and the second column shows which tie point (of those defined for that
crossing) is displayed in a particular line. The third and fourth columns
identify the navigation control points of the tie point. The navigation
control points are specified by file, section, and nav point numbers separated
by ":". The fifth and sixth columns are the longitude and latitude offsets (in
meters) set interactively by the user. These represent the distance the second
navigation control point must be moved relative to the first in order to make
the bathymetry in the two swathes match. The last two columns are nonzero only
after an inversion for an optimal navigation solution has been performed. These
represent the residual, or difference, between the offset calculated for this tie
point in the inversion and that set by the user 
(displayed in the fifth and sixth columns).

If the file list is displayed and one file is selected by clicking in
the list, then the user can fix or unfix the navigation of that file using
the <Action->Fix File> or <Action->Unfix File> pulldown menu items.
If either the crossing list or the tie point list are displayed, selecting
one crossing or one tie point by clicking in the list widget will cause
the specified crossing to be loaded and displayed in the \fBNav Err\fP
window.

.SS Controls Window
This dialog window is brought up by clicking the \fBOption->Controls\fP
menu item in the \fBMBnavadjust Window\fP. This window includes two slider
widgets setting data importation parameters, four slider widgets setting 
data display parameters, a button to apply any changes, and a button to
dismiss the window.

.TP
.B Max Section Length (km)
When \fBmbnavadjust\fP imports swath data, it breaks each data file
up into a set of sections, or pieces. The geographical coverages of all sections 
are then compared to determine where swathes overlap or cross. This control
sets the section track length. The ideal section length varies with the sonar
altitude and ping rate. If the section length is too short, there will be too
many small sections and an excessive number of crossings to analyze. If the
section length is too large, individual sections will be slow to load and display.
.TP
.B Max # Soundings in Section
This slider widget sets an additional or alternative control on swath data section size: the
maximum number of soundings (not pings) that may be included in a given section. For some
datasets, it may be more convenient to use the number of soundings rather than the track
length as the criterea for breaking files up into sections.
.TP
.B Decimation
When swath bathymetry sections are displayed in the \fBNav Err\fP window,
the primary display consists of bathymetric contours. 
The time required for calculating these
contours is linear with the number of soundings. This slider allows users to 
decimate the pings used for the contour displays. If the decimation is set
to 1, all soundings are used. If the decimation is set to 2, the soundings from
every second ping are used for contouring.
.TP
.B Contour Interval (m)
This slider widget sets the depth interval in meters for the bathymetric contours.
.TP
.B Color Interval (m)
This slider widget sets the the depth interval in meters at which the
color of the bathymetric contours changes. The contours are generated in four
colors: black, red, green, and blue. The color interval should be a multiple
of the contour interval.
.TP
.B Tick Interval (m)
This slider widget sets the depth interval in meters at which contours have
downhill facing tickmarks. The tick interval should be a multiple of the contour
interval.
.TP
.B Apply
This button applies any changed values in the slider widgets of the \fBControls Window\fP.
If the \fBControls Window\fP is closed without the \fBApply\fP button being clicked, all
changes to the values controlled by the sliders are lost.
.TP
.B Dismiss
This button closes the \fBControls Window\fP.

.SS Nav Err Window
This window allows users to interactively inspect crossing swathes,
define navigation tie points where bathymetric features can be matched,
and set the navigation offsets at those tie points. This window can
be brought up in a number of ways. If one pulls down the
menu option <Action->Analyze Crossings>, then the "Nav Error" window 
will come up with the first crossing loaded. Alternatively, if the
<View->Show Crossings> menu item has been selected so that a table of
crossings is displayed, clicking once on any of the crossing items in
this tabel will bring up the  "Nav Error" window with that crossing loaded.
Similarly, if tie points have been established and the tie point table
displayed by selecting the <View->Show Ties> menu item, then clicking on
any of the tie items this table will bring up the "Nav Error" window 
and load the crossing that includes the selected tie point. If the
"Nav Error" window is already displayed, clicking on crossing or tie items
in the display tables will load the selected crossing in place of whatever
crossing was previously shown.

The Nav Err window includes a number of button widgets and two display
canvases. The larger display to the right shows bathymetric contour maps
of the overlapping swathes overlain by navigation tracks and any tie points
that have been defined for the current crossing. The smaller canvas on the
lower left shows the RMS bathymetry misfit between the two swathes. 

.TP
.B Contour Display
This canvas displays color bathymetric contours from both overlapping
swathes in the current swath crossing. Initially, the display is scaled
so that the entire area covered by the current crossing is visible. The 
bathymetric contours of the second swath can be moved relative to those
of the first by dragging with the left mouse button in the canvas. The
current navigational offset changes as the contours shift. The location 
of the current offset also changes simultaneously on the misfit plot. The
user can display a subregion of the current map by dragging a rectangle in the canvas 
with the middle mouse button. This zoom operation can be repeated as many times
as desired. The right mouse button is used to set the location of the current
navigational tie point. When the right mouse button is clicked on a point in
the contour map, the closest navigation control points from each swath to 
that position are selected for the current tie point. In practice, the user
should right-click on the bathymetric feature being matched to set the
tie point correctly.
.TP
.B Misfit Display
This canvas shows a color two dimensional plot of the RMS bathymetric misfit
between the two overlapping swathes. The misfit is shown as a function
of relative lateral offsets between the two  swathes.  Put
another  way,  the misfit plot shows how good, or bad, the
misfit becomes as one moves one swath relative to another.
The  lowest misfit values are shown in red; higher misfits
are shown in blues to purples. The location of the minimum
misfit  is  marked by a black "X", and the location of the
current navigation offset is shown by a small  red  square
with a black outline. If an inversion has been performed, a
small black "+" will mark the location of the offset calculated
by the inversion. If a user clicks in the Misfit Display, the
location of the cursor is taken as the new navigation offset
and the red square moves to that location. Simultaneously, the
bathymetric contours in the Contour Display shift to reflect
the new offset.
.TP
.B Settings
This button brings up a pulldown menu with two items: \fPBiases\fP and \fBContoursB
.TP
.B Settings->Biases
This menu item brings up a dialog window with several slider widgets
that set roll and heading bias values.
These widgets are discussed in the \fBBiases\fP section below.
.TP
.B Settings->Contours
This menu item brings up a dialog window with several slider widgets
that set parameters controlling how swath data are imported and displayed.
These widgets are discussed in the \fBControls\fP section above.
.TP
.B Previous
Clicking this button causes the Nav Err window to load and display the previous crossing.
.TP
.B Next
Clicking this button causes the Nav Err window to load and display the next crossing.
.TP
.B Next Unset
Clicking this button causes the Nav Err window to load and display the next crossing which
has no tie points set and has not been explicitely skipped.
.TP
.B Full Size
Clicking this button causes the contour display to resize so that it shows the entire area
covered by the swath sections in the current crossing.
.TP
.B Select Tie
If more than one navigation tie point has been defined for a crossing,
then only one tie point can be active at any time. The navigation control points of the
active tie points will be displayed as red boxes, and those of any inactive
tie points will be shown as smaller red boxes. This button changes the active tie point.
Repeatedly clicking this button will cycle through all of the tie points in the
current crossing. Note that each tie point has its own offset defined, so in general
the positions of the bathymetric contours will change as the active tie point changes.
.TP
.B Set Offset
This very important button causes the current navigational offset to be set for the
current tie point and crossing. This button is the only way that the navigational offsets
are actually applied to the \fBmbnavadjust\fP project. If the user closes the Nav Err window, 
changes the loaded crossing, or changes the active tie point without clicking <Set Offset>,
whatever navigational offset was viewed will be lost.
.TP
.B Zero Offset
This button sets the current navigational offset to zero meters longitude and zero meters latitude.
.TP
.B Add Tie
This button adds a new tie point for the current crossing and makes this new tie point
active. The tie point initially adopts the current navigational offset.
.TP
.B Delete Tie
This button deletes the current active tie point.
.TP
.B Skip Crossing
This button indicates that no good tie points can be defined for the current crossing.
The program \fBmbnavadjust\fP will not allow an inversion to be calculated until all crossings
either have tie points defined or have been explicitely skipped.
.TP
.B Reset Offset
This button resets the working or current navigational offset to that saved for the current
crossing and active tie point.
.TP
.B Dismiss
This button closes the Nav Err window.
.TP
.B Minimum Misfit
This button shifts the current offset to the value identified as the minimum misfit in
the current misfit display. The minimum misfit is always shown as a black X on the 
color misfit plot.
.TP
.B Center on Zero Offset
This button causes the misfit plot to be regenerated using a zero navigational offset as the plot origin.
.TP
.B Center on Current Offset
This button causes the misfit plot to be regenerated using the current navigational offset as the plot origin.

.SS Biases Window
This dialog window is brought up by clicking the \fBSettings->Biases\fP
menu item in the \fBNav Err Window\fP. The controls allow users to set
roll and heading bias (or offset) values to be a applied to some or all of
the swath bathymetry in the \fBmbnavadjust\fP project. Under most circumstances,
roll bias and pitch bias problems should be resolved before swath data are
imported into \fBmbnavadjust\fP. However, these settings make it possible to
deal with bias issues if they are discovered during the navigation adjustment
process. This window includes two toggle
buttons to set the bias mode, four slider widgets to set the bias parameters, 
a button to apply the bias settings to all swath files, a button to apply the bias
settings to the current swath file, and a button to
dismiss the window.

.TP
.B Same Biases (km)
This toggle button sets the bias mode so that the heading and roll bias is identical
for both swath data sections in the current crossing. The <Different Biases> toggle
is deselected when this toggle is selected.
.TP
.B Different Biases (km)
This toggle button sets the bias mode so that the heading and roll bias can be
different between the two swath data sections in the current crossing.  The <Same Biases> toggle
is deselected when this toggle is selected.
.TP
.B Section 1 Biases (deg) -> Heading
This slider widget sets the heading bias for swath section 1. The 
.TP
.B Section 1 Biases (deg) -> Roll
This slider widget sets the roll bias for swath section 1.
.TP
.B Section 2 Biases (deg) -> Heading
This slider widget sets the heading bias for swath section 2.
.TP
.B Section 2 Biases (deg) -> Roll
This slider widget sets the roll bias for swath section 2.
.TP
.B Apply to All Files
This button sets the current heading and roll bias values as the
bias values for all swath files in the \fBmbnavadjust\fP project.
This button is only enabled when the <Same Biases> toggle is selected.
.TP
.B Apply
This button sets the current heading and roll bias values as the
bias values for the swath sections in the current crossing. The bathymetry
contours and misfit plot are recalculated and redisplayed using the
new bias values.
.TP
.B Dismiss
This button closes the \fBControls Window\fP.


.SH USING MBNAVADJUST 1: IMPORTING DATA
Users begin using \fBmbnavadjust\fP by starting up the program
on the command line:
.br
 	mbnavadjust
.br
In order to get started, one must either open an existing
\fBmbnavadjust\fP project or initialize a new one. Both options
are available under the <File> menu with the <File->New> and <File->Open>
menu buttons. When one pulls down the <File->New> option, a dialog opens
that allows navigation of the filesystem and specification of 
a project name. Whatever project location and name is chosen,
a directory "{project_path}/{project_name}.dir" and a file
"{project_path}/{project_name}.nvh" will be created. Once
a project exists and has been opened, swath data can be imported and then
analyzed. To open an existing \fBmbnavadjust\fP project, click
the <File->Open> option and select the corresponding "*.nvh" file.

The main \fBmbnavadjust\fP window displays basic information in a set of
labels in the upper left, including the open project name, the number of
files imported, the number of crossings found, the number of crossings
analyzed, the number of navigation tie points set, and whether an
up-to-date inversion for optimal navigation has been performed. A scrollable
text window in the lower left displays messages regarding all actions
performed by the program during the current session. Another scrollable
window on the right displays one of three tables of information according
a user selection under the <View> menu. The three choices are a table
of the imported swath files, a table of the swath crossings, and a table
of the interactively defined navigation tie points. If no swath data has
yet been imported, then the all of the tables will be empty. Once some data
files are imported, the swath file table will have entries and
some number of crossings will be defined (assuming that 
swathes do overlap and cross), but no tie points will yet be defined.

In order to import swath data into an \fBmbnavadjust\fP project,
pull down the <File->Import Swath Data> menu item. A file selection
dialog will appear. Swath data can be imported in single files or through
datalists (see the \fBMB-System\fP manual page for a description
of recursive datalists). As with other \fBMB-System\fP programs, the format
id will be automatically determined if possible for each file selected.
If a filename does not follow the the \fBMB-System\fP naming convention, the
user may need to manually set the format id in the appropriately labeled
dialog text widget. 

Each file that is imported is broken into
a number of sections. The maximum size of the sections in line length or
in number of soundings is set in a dialog opened by clicking on 
<Option->Controls>. Navigation control points are selected at regular
intervals within each section. The control point distance interval is 
approximately  one tenth of the specified segment length, so there are 
up to 11 control points for each section. The data for each section is 
written as a format 71 bathymetry-only file in the "*.dir" directory. 
As the files are imported, the areal extent of each section is 
compared to the other sections. Any pair of sections that overlap
is added to a list of crossings to be investigated graphically. This list
can be displayed by pulling down the <View->Show Crossings> menu item.

As the user later works through the crossings, he or she will will define tie points
whenever the overlapping bathymetry allows the navigational offset
to be determined reliably. Each tie point will reference two of the navigation
control points, one from each swath in the crossing. 
Ultimately, some crossings will allow one, or in some case multiple tie 
points to be defined. Other crossings will still have no tie points, either
because the swathes don't really overlap or because there aren't any
distinctive features to match. When all of the crossings have been inspected, 
then the user can invoke inversion for an optimal navigation solution. 

.SH USING MBNAVADJUST 2: INSPECTING CROSSINGS

.SS Bringing Up The Nav Error Window

The heart of \fBmbnavadjust\fP is the interactive inspection of the
swath crossings. One can bring up the crossing inspection window
(entitled "Nav Error") in a number of ways. If one pulls down the
menu option <Action->Analyze Crossings>, then the "Nav Error" window 
will come up with the first crossing loaded. Alternatively, if the
<View->Show Crossings> menu item has been selected so that a table of
crossings is displayed, clicking once on any of the crossing items in
this tabel will bring up the  "Nav Error" window with that crossing loaded.
Similarly, if tie points have been established and the tie point table
displayed by selecting the <View->Show Ties> menu item, then clicking on
any of the tie items this table will bring up the "Nav Error" window 
and load the crossing that includes the selected tie point. If the
"Nav Error" window is already displayed, clicking on crossing or tie items
in the display tables will load the selected crossing in place of whatever
crossing was previously shown.

Once the "Nav Err" window is displayed, the user can also move through
the crossings by clicking on the <Previous>, <Next>, and <Next Unset>
buttons. The <Previous> and <Next> buttons will load the previous or
next, respectively, crossings in the crossing list. As discussed below,
each crossing must ultimately be "resolved" by either having one or
more navigation offsets set at particular "tie points", or by being
"skipped" because no matchable seafloor features are found. The <Next Unset>
button will load the next crossing that has not been resolved.
To close the "Nav Err" window, click the <Dismiss> button.

.SS Interactively Matching Seafloor Features

The "Nav Error" window is complicated in appearance, and
regrettably complicated in function also.
The purpose is to allow the user to determine if any seafloor features
can be confidently matched in the overlapping swathes. If so, one or more
tie points can be defined. In order to ease the identification of matching
features, two simultaneous displays are provided. 
The larger plot on the right consists of overlain
bathymetric contours derived from each of the two swathes. The smaller
canvas on the left shows a color two dimensional plot 
of the RMS misfit between the two swathes. The misfit is shown
as a function of relative lateral offsets between the two swathes. Put another
way, the misfit plot shows how good, or bad, the misfit becomes as one moves
one swath relative to another. The lowest misfit values are shown in red; higher
misfits are shown in blues to purples. The location of the minimum misfit is
marked by a black "X", and the location of the current navigation offset is
shown by a small red square with a black outline.

The interactive aspect of the "Nav Error" window works simultaneously
in both displays. If the user holds down the left mouse button in the
contour plot and moves the cursor, the bathymetry contours from one swath
will move along with the cursor. In this way, the user can move one of the
swathes around relative to the other until the contours line up and features
match. As the contours move, the red square showing the current offset location
also moves on the misfit plot. The user can thus visually relate the contour matching
to the misfit function. The combination of these two displays greatly improves
a user's ability to reliably determine navigational offsets (and to conclude
where navigational offsets cannot be determined).

The "Nav Err" window includes two buttons that are particularly useful during
efforts to match seafloor features. The <Minimum Misfit> 
button below the misfit display will cause 
\fBmbnavadjust\fP to set the current navigational offset to that
associated with the smallest misfit for the current misfit display. This button
is often used first to get close to the right offsets.
The <Zero Offset> button above the contour display will return both displays
to a state of zero navigational offset. 

The relationship between the contoured bathymetry and the misfit plot
is usually quite clear. If a strongly matching seafloor feature
exists, then a distinct minimum will show up in the misfit plot. If the navigation
is good and the feature already matches, then the misfit minimum will be located
at the center of the plot, corresponding to an offset that is zero distance in
both the east-west and north-south directions. If the navigation is bad, then
the misfit minimum will be offset from the origin, and the offset vector
will correspond to how far and what direction one must move one swath so that
the features in both swathes match. In cases where there is no distinctive
seafloor feature to match, the misfit plot will not display a strong
minimum and it will be impossible to determine the relative navigational
offset. Alternatively, the existence of multiple similar features can
produce multiple local minima in the misfit map. In this case, the ambiguity
between multiple possible solutions prevents the determination of the 
navigational offset. We have found that combining both contour
and misfit displays allows interactive, visually based decision making that
is more generally reliable than any automated scheme we can devise.

Navigational offsets can only be used when they are associated with specific
points on the overlapping swath navigation. These points are called "tie points".
All crossings will begin with no tie points, and users can generate one or more
tie points for any crossing as required.
The creation and manipulation of tie points is discussed in detail in a later section.

It is also important to understand that any apparent navigation offset observed
in the contour and misfit plots is relative. It may turn
out that both swathes are poorly navigated and have to be moved, or that all
of the offset can be applied to one swath or the other. The set of decisions about
how to distribute the relative navigation offsets among the affected swath files
intrinsically involves speed and acceleration changes. Fortunately, 
we are able to formulate the automated inversion process discussed below to obtain an 
optimal navigation solution.

.SS Display Controls

The user controls the appearance of the bathymetry contour plot.
The contours are generated at regular intervals in depth, and also change
color and are annotated with downhill facing tickmarks at regular intervals.
A controls dialog brought up by clicking on the <Settings->Contours> button
allows the user to set the contour, color change, and tickmark intervals. This
same dialog also sets a decimation parameter that causes the contours to be
calculated from fewer soundings (the data are decimated by ignoring pings). The application of
decimation may speed up the crossing loadings, but is not generally recommended
unless the bathymetry is strongly oversampled.

Users may also use a "zoom" feature to focus on small areas in the contour plot.
The center mouse button is used to drag a box over a region of interest in the
contour plot. When the center button is released, both the contour and misfit plots
are regenerated to show the smaller area. 
Users may zoom as many times in succession as
desired. One cannot undo the individual zoom events, but clicking the <Full Size>
button in the "Nav Err" window will cause the plots to show the original, full
area covered by the two swathes in the current crossing.

The misfit plot represents lateral offsets scaled according to the current
contour plot display. Specifically, the width and height of the misfit plot
correspond to one half the width and height of the bathymetry contour plot.
When the bathymetry plot area changes due to a zoom event, the misfit is 
recalculated and redisplayed centered around the current offset. The color map 
used for the misfit display is automatically scaled according to the
minimum and maximum misfit values.

.SS Setting Crossing Ties and Offsets

In order to actually set the relative navigational offset between two particular
points on overlapping or crossing swathes, the user must first create a tie point.
This is accomplished by clicking on the <Add Tie> button in the "Nav Err" window.
Once a tie point exists, it will shown on the contour plot as two red-filled, black
outlined squares connected by a thin black line. Each of the squares 
is located along one of the swath navigation tracks, and represents one of
the navigation control points defined during data importation. 
There can be multiple tie points for each crossing, and
each one is created by clicking on the <Add Tie> button. Only one tie point
will be active at any time. The active tie point is displayed with larger boxes
(the inactive tie points are only 1/4 the size. If only one tie point has been
defined, it will always be active. If more than one tie point exists, 
clicking on the <Select Tie> button in the "Nav Err" window will change the
active tie point to the next in the list for the displayed crossing 
(the tie points are selected in the order in which they were
created). If the user wishes to delete a tie point, then click <Select Tie> until
the undesirable tie point is active, and then click <Delete Tie>.

When viewing a crossing with one or more tie points, the offsets displayed are
associated with the current tie point. As one moves the contours to match
overlapping features, it is important to remember that the navigational
offset will be applied to the navigation points indicated for the current
tie. Thus, the feature being matched should derive from data (soundings)
associated with those particular points on the shiptrack. This is
accomplished by clicking on the bathymetric feature in the contour display 
with the right mouse button. The "right-click" causes \fBmbnavadjust\fP to
find the soundings from each swath that are closest to the point clicked, and
then to shift the current tie point to the navigation points on each swath 
that include these soundings (that is, the navigation points associated with
the sonar pings that include the closest soundings).

In order to set, and save, a navigational offset that causes a bathymetric
feature to be matched in overlapping swathes, the user must click the
<Set Offset> button above the contour display. If a user changes 
the active tie point or loads a different crossing
without clicking <Set Tie>, then no offset information will be saved.
Conversely, for any crossing with one or more tie points, 
the <Reset Offset> button will reset the navigational
offset to the last value set for the current crossing and tie point.

So, in practice, setting navigational offsets that will be used in obtaining
an optimal navigation solution involves the following steps:
.br
 	1. Identify a bathymetric feature with 
 	   overlapping data so that it can be 
 	   matched.
 	2. Create a tie point by clicking the 
 	   <Add Tie> button.
 	3. Set the tie point location by right
 	   -clicking on the feature.
 	4. If necessary, zoom the display to 
 	   focus on the bathymetric feature 
 	   of interest by dragging a box
 	   with the middle mouse button.
 	5. Adjust the offsets so that the 
 	   feature is matched in both swathes 
 	   (operating in the contour display, 
 	   the misfit display, or both).
 	6. Click the <Set Offset> button.
.br
These steps should be followed for every feature that can be matched
in overlapping swathes. 

In some cases, the user will find it useful
to create and set multiple tie points in a single crossing. Other crossings
may not allow any features to be matched. Users should click the 
<Skip Crossing> button on crossings that do not allow one or more offsets
to be determined. In fact, \fBmbnavadjust\fP will 
only allow the calculation of a navigation
solution when all of the crossings have been acted on by either having tie
points set or by having been explicitly skipped.

Users should feel free to iterate any way they like during
crossing inspection. Crossings may be displayed as many
times as desired, and ties can be created, deleted, and
changed without restriction. Users may also quit \fBmbnavadjust\fP
and then later reopen the same project without losing any
information.

.SS Setting Fixed Files

In some instances, users will wish to fix certain datafiles so that the
navigation cannot be changed. This allows one to adjust the navigation
of the unfixed swath files so that the features match those of the fixed
files. In order to fix a swath file, the user first displays the table
of imported swath files in the main window by pulling down the 
<View->Show Data Files> menu option. The word "fixed" will be in the
table row for any file that has already been fixed. If a user selects
an unfixed file in the table, then pulling down the <Action->Fix File> 
menu option will, not surprisingly, fix the file. Similarly, selecting 
a fixed file and then pulling down the <Action->Unfix File> menu option 
will unfix that file.

.SH USING MBNAVADJUST 3: INVERTING FOR AN OPTIMAL NAVIGATION SOLUTION

.SS Performing the Inversion

Once the user has interactively analyzed all of the crossings
and closed the "Nav Err" window by clicking the <Dismiss> button,
the <Action->Invert navigation> button becomes enabled. Clicking
this button causes \fBmbnavadjust\fP to construct and solve
an inversion for the optimal navigation.

The inversion solves for navigation adjustments at each
navigation control point which satisfy the offsets at the tie points while
minimizing speed and acceleration. The speed and acceleration penalty is
set using a penalty weight value that may be varied. If the penalty weight
is large, the navigation adjustments may be smooth and small but not fit the
tie point offsets well. An infinite penalty weight produces uniformly
zero adjustments. In contrast, a small penalty weight allows the tie point offsets
to be fit as well as possible even if large speed and acceleration spikes
are a consequence. Hoever, even with a zero penalty weight the inversion may
not be able to exactly satisfy all of the tie point offsets. If some of 
the tie point offsets are conflicting (e.g. one tie point requires a navigation
control point to move to the west while another tie point requires a
move to the east), then the offsets cannot all be simultaneously fit
exactly.

The inversion is actually performed many times with different penalty weights,
and the "best" solution is selected and applied to the data. The details of
how the "best" solution is identified are given in the section "Details
of the Inversion" section below. A log of the inversion parameters, the results
from each of the inversion iterations, and detailed results from the final
inversion are output to the Message text window. The program then 
outputs an adjusted navigation file for each of the input swath files and
updates (or creates) the parameter file for each swath file so that
\fBmbprocess\fP will merge the adjusted navigation.

The output adjusted navigation files are named by adding a ".na#" suffix
to the original swath data filename. If a swath file imported into
\fBmbnavadjust\fP for the first time is named:
.br
 	mbari_1998_55.mb57
.br
then the adjusted navigation resulting from that project will be named:
.br
 	mbari_1998_55.mb57.na0
.br
If this file is imported into a second \fBmbnavadjust\fP project, the
result from inversion in that project will be:
.br
 	mbari_1998_55.mb57.na1
.br
In addition to generating the adjusted navigation, \fBmbnavadjust\fP also
sets the NAVADJMODE and NAVADJFILE values in the \fBmbprocess\fP
parameter file. In this case, the parameter file is named:
.br
 	mbari_1998_55.mb57.par
.br
and the processed swath file generated by running \fBmbprocess\fP is:
.br
 	mbari_1998_55p.mb57
.br
Refer to the \fBmbprocess\fP and \fBmbset\fP manual pages for details on
the control and use of \fBmbprocess\fP.

Note that the relevant parameter file settings will reflect the most recent 
inversion in \fBmbnavadjust\fP.
Users do need to be aware that the order of navigation processing is important
because, when possible, \fBmbnavadjust\fP imports existing processed data files.
The data within the \fBmbnavadjust\fP projects are not, however, updated when the
source data are updated. Consequently,
standard navigation processing should be completed and applied with \fBmbprocess\fP
before a swath file is imported into an \fBmbnavadjust\fP project. If a swath
file is to be used in multiple \fBmbnavadjust\fP projects, the first project
should be finalized and the results applied before data are imported into the
second.

.SS Fine-Tuning the Inversion

Once an inversion has been performed, the user should inspect the fit for each
of the tie points before accepting and applying the adjusted navigation. The relationship
between the interactively defined navigation offsets and the offsets associated with
the inversion can be investigated numerically in the tie points table or 
visually in the "Nav Err" window. 

We suggest first examining the tie points table
by pulling down the <View->Show Ties> menu item. This table shows, from left to
right, the identity of each tie point, the longitude and latitude offsets defined
by the user (in meters), and the longitude and latitude residuals, or 
differences between these offsets and those associated with the inversion (in meters). 
If any of these residuals are unexpectedly large, simply clicking on the table line
showing the suspect navigation tie will bring up the "Nav Err" window and load the
crossing including that navigation tie. Once an inversion is performed, the
"Nav Err" crossing displays show the inverted offset as a small '+' symbol
on the misfit plot. The user can then determine whether the
previously set navigation offset is truly required by the data. On occasion, one
discovers that the offset obtained in the inversion is as consistent with
the bathymetry as the offset originally set by the user. Once the offset values
have been adjusted as necessary, they can be reset by clicking on the
<Set Offset> button (just as in the earlier interactive sessions).

Once all of the suspect navigation ties have been inspected, and perhaps corrected,
another inversion can be generated using the revised set of offsets. In this way,
users can iterate over cycles of inversion and inspection until a satisfactory
(self-consistemt) solution is obtained. When the final inversion has been
performed, the user can then run \fBmbprocess\fP on all of the affected swath data
files to produce a set of processed files incorporating the optimally adjusted
navigation. Once again, we emphasize that users should always finalize an
\fBmbnavadjust\fP project before importing affected swath data into another
\fBmbnavadjust\fP project.

.SS Details of the Inversion

The inversion is constructed as a sparse overdetermined least squares
matrix problem. Suppose we have N navigation control points in all of the 
swath files and have defined M tie points. The form of the problem is:
.br
 
.br
 	\fBA\fP \fBX\fP = \fBD\fP
.br
 
.br
Here \fBX\fP is the vector of unknowns, which happen to be the changes in the longitude
and latitude values of all of the navigation control points. So, there
are 2N unknowns. Note that we
do not solve directly for longitude and latitude, but rather for the change,
or perturbation, to the longitude and latitude values. 
The matrix \fBA\fP contains 2N columns corresponding to
the unknowns and a row for each of the constraints we can apply to
the navigation adjustment problem. The number of elements in the "data"
vector \fBD\fP also corresponds to the number of constraints. 
We apply four sets of constraints in this inverse problem:
.br
 	1) Fixed navigation points
.br
 	2) Penalize speed (first derivative)
.br
 	3) Penalize acceleration (second derivative)
.br
 	4) Fit navigation offsets at tie points

The first kind of constraint is simply expressed as:
.br
  
.br
 	XLONj = 0
.br
  
.br
	XLATj = 0
.br
  
.br
where XLONj is the longitude change 
and XLATj is the latitude change for the "j"th navigation control point.

The second contraint (speed) is also one of minimization:
.br
  
.br
 	-XLONj + XLONj+1
.br
 	----------------  = 0
.br
 	    -Tj + Tj+1
.br
  
.br
 	-XLATj + XLATj+1
.br
 	----------------  = 0
.br
 	    -Tj + Tj+1
.br
  
.br
Here XLONj+1 and XLATj+1 are the longitude and latitude changes 
for the "j+1"th navigational control point and Tj and Tj+1 are the
times of the "j"th and "j+1"th navigational control points. The
denominator in these expressions is thus the time difference between
the two navigation points. The speed constraint can only be applied
to navigation control points that are sequential, and is not applied
across breaks in the swath data. Note that multiple swath files
may be sequential without breaks, while time gaps or breaks can occur
within a single swath file. The existence of gaps or breaks in the
swath data is determined solely on the basis of time gaps as the data
are imported.

The third contraint (acceleration) is also one of minimization:
.br
  
.br
 	XLONj - 2 * XLONj+1 + XLONj+2
.br
 	-----------------------------     = 0
.br
 	    -Tj + Tj+2
.br
  
.br
 	XLATj -2 * XLATj+1 + XLATj+2
.br
 	-----------------------------     = 0
.br
 	    -Tj + Tj+2
.br
  
.br
The second derivative calculation requires three sequential 
navigation control points: j, j+1, and j+2.
Here XLONj+2 and XLATj+2 are the longitude and latitude changes 
for the "j+2"th navigational control point and Tj and Tj+2 are the
times of the "j"th and "j+2"th navigational control points. The
denominator in these expressions is thus the time difference between
the "j"th and "j+1"th navigation points.

The final, and most important constraints
are the relative navigation ofsets defined for each of the M tie points.
Since each offset has a longitude and a latitude value, there are 2M 
rows in \fBA\fP and elements in \fBD\fP associated with the tie points.
If the "i"th tie point specifies an offset DLONi and DLATi between the "j1"th and "j2"th
navigation control points, then the constraint may be expressed as:
.br
  
.br
 	-XLONj1 + XLONj2 = DLONi
.br
  
.br
 	-XLATj1 + XLATj2 = DLATi
.br
  
.br

The size of the matrix problem will vary with the number of navigation
control points, tie points, fixed points, and time gaps. However, the addition
of the speed and acceleration minimization constraints guarentees that the
number of constraints will always be larger than the number of unknowns, and
so we will always be solving an overdetermined least squares problem.
Each of the above equations contribute one row to the matrix problem, and each
of these rows has at most three nonzero elements in \fBA\fP. As a result,
this matrix problem is also always extremely sparse. This condition allows
us to use one of a class of approximate least squares solution algorithms that are 
efficient in solving sparse problems. The algorithm used for \fBmbnavadjust\fP
inversions is that of Olsen [1987].

The importance of the speed and acceleration minimization constraints is varied
by multiplying the associated matrix row elements by a penalty weight value. 
In practice, the inversion is constructed and solved with many different
penalty weights, and the "best" inversion is selected and applied. Generally
speaking, we seek the smoothest inversion that satisfactorily fits the
tie point offsets. We set smoothness using the penalty weight value so that larger
penalty weights correspond to smoother solutions. 
We measure the fit to the tie point offsets using the usual least squares
calculation: 
.br
 	   2      2                                    2
 	Fit  = Chi  = SUM(  (DLONi - (XLONj2 - XLONj1))
 	                                               2
 	                  + (DLATi - (XLATj2 - XLATj1))  )
.br
using the same notation as above. Note that the units of Chi are distance, and so
are physically meaningful. A smaller Chi corresponds to a better fit to the
tie point offsets. The Chi value will be smallest for a zero
penalty weight, and increase as more smoothing is applied.

The initial solution is generated using a very small penalty weight to
insure that the smoothing is negligible and that the tie point offsets are fit
to the maximum degree possible. This first inversion is used to set a "reference"
value of Chi. In some cases, the tie points offsets do not substantially conflict
and it is possible for the inversion to fit the offsets nearly exactly so that
Chi is quite small. If the initial Chi is greater than 1.0 meters, \fBmbnavadjust\fP
sets the reference fit to this value. Otherwise, the reference fit is set to
1.0 meters (a reasonable minimum for navigational uncertainty). 
The program then recalculates solutions with different
penalty weights until the resulting Chi is between 1.05 and 1.1 times the reference fit.
This last solution is chosen as the best solution, reported as the navigation
adjustment inversion solution, and applied to that swath data navigation. 
The justification for choosing the optimal solution in this fashion is that
this approach insures that the smoothness constraint is sufficient large to
be impacting the fit, but not so large that the fit has been substantially degraded.

.SH REFERENCES

Nishimura, C. E., and D. W. Forsyth, Improvements in navigation 
using SeaBeam crossing errors, \fIMar. Geophys. Res.\fP, \fB9\fP, 333-352, 1988.
.br
.br
Olson, A. H., A Chebyshev condition for accelerating convergence of iterative tomographic
methods - Solving large least squares problems, 
Phys. Earth Planet. Inter., 47, 333-345, 1987.
.br
.br
Parker, R. L., \fBGeophysical Inverse Theory\fP, Princeton University Press, Princeton, NJ, 1994.

.SH SEE ALSO
\fBmbsystem\fP(l), \fBmbio\fP(l), \fBmbprocess\fP(l), 
\fBmbnavedit\fP(l), \fBmbset\fP(l)

.SH BUGS
It's too new to be bulletproof.

