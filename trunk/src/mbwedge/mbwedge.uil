/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * BuilderXcessory Version 6.1.3.
 *
 * Identification: 
 */
module main_uil
version = 'V2.1'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-lGLw -lSgm -lXm -lXt -lGL -lXext -lX11 -lgen -lm")
!(BX) bx_info("c_cflags", "-Aa -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_information", "")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "false")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "mbwedge")
!(BX) bx_info("c_class", "mbwedge")
!(BX) bx_info("c_app_defaults", "mbwedge_appdefaults", true)
!(BX) bx_info("c_utilities", "mbwedge_bxutils.c", true)
!(BX) bx_info("c_constants", "mbwedge_creation.h", true)
!(BX) bx_info("c_callbacks", "mbwedge_callbacks.c", true)
!(BX) bx_info("c_creation", "mbwedge_creation.c", true)
!(BX) bx_info("c_main", "mbwedge.c", true)
!(BX) bx_info("c_acinclude_m4", "acinclude.m4", false)
!(BX) bx_info("c_configure_in", "configure.in", false)
!(BX) bx_info("c_makefile_am", "Makefile.am", false)
!(BX) bx_info("c_cvsmake", "CVSMake", false)
!(BX) bx_info("c_makefile", "Makefile.org", true)
!(BX) bx_info("c_imakefile", "Imakefile", true)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("system_directory", "/opt/bx-6.1")
!(BX) bx_info("builder_version", "BuilderXcessory Version 6.1.3")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

procedure BxGlobalWidgetId;
identifier BXG_pushButton_end;
identifier BXG_pushButton_start;
identifier BXG_pushButton_file;
identifier BXG_toggleButton_view_histogram;
identifier BXG_toggleButton_view_log;
identifier BXG_toggleButton_view_linear;
identifier BXG_pushButton_next;
identifier BXG_pushButton_done;
identifier BXG_pushButton_forward;
identifier BXG_pushButton_reverse;
identifier BXG_slider_scale_playbackspeed_label;
identifier BXG_slider_scale_playbackspeed;
identifier BXG_slider_scale_playbackspeed_max_label;
identifier BXG_slider_number_step_label;
identifier BXG_slider_number_step;
identifier BXG_slider_number_max_step_label;
identifier BXG_canvas_mbwedge;
identifier BXG_fileSelectionBox;
identifier BXG_textfield_format_label;
identifier BXG_textfield_format;
identifier BXG_textfield_day;
identifier BXG_textfield_second;
identifier BXG_textfield_minute;
identifier BXG_textfield_hour;
identifier BXG_textfield_month;
identifier BXG_textfield_year;
identifier BXG_label_about_version;
identifier BXG_label_message;
identifier BXG_bulletinBoard_message;
identifier BXG_label_error_two;
identifier BXG_label_error_one;
identifier BXG_label_error_three;
identifier BXG_bulletinBoard_error;
identifier BXG_slider_buffer_hold_max_label;
identifier BXG_slider_buffer_hold;
identifier BXG_slider_buffer_hold_label;
identifier BXG_slider_buffer_size_max_label;
identifier BXG_slider_buffer_size;
identifier BXG_slider_buffer_size_label;
identifier BXG_slider_y_max_interval_label;
identifier BXG_slider_y_interval;
identifier BXG_slider_y_interval_label;
identifier BXG_slider_x_max_interval_label;
identifier BXG_slider_x_interval;
identifier BXG_slider_x_interval_label;
identifier BXG_window_mbwedge;
procedure BxManageCB(string);
procedure BxUnmanageCB(string);
procedure do_buffer_hold();
procedure do_buffer_size();
procedure do_done();
procedure do_end();
procedure do_event();
procedure do_expose();
procedure do_forward();
procedure do_goto_apply();
procedure do_load_check();
procedure do_next_buffer();
procedure do_number_step();
procedure do_play();
procedure do_quit();
procedure do_reverse();
procedure do_scale_playbackspeed();
procedure do_start();
procedure do_stop();
procedure do_view_mode();
procedure do_x_interval();
procedure do_y_interval();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list Style_use : arguments {
        arguments BaseStyle;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list Style_useReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list Style_useHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


object slider_x_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("X Axis Tick Interval (m): 1");
        XmNx = 20;
        XmNy = 10;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_x_interval : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 1000;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 200;
        XmNy = 10;
        XmNwidth = 250;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_interval);
        XmNvalueChangedCallback = procedure do_x_interval();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_x_max_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 10;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_max_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Y Axis Tick Interval (m): 1");
        XmNx = 10;
        XmNy = 60;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_interval : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 250;
        XmNmaximum = 1000;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 200;
        XmNy = 50;
        XmNwidth = 250;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_interval);
        XmNvalueChangedCallback = procedure do_y_interval();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_max_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("1000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 60;
        XmNwidth = 65;
        XmNheight = 15;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_max_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_annotation_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 230;
        XmNy = 100;
        XmNwidth = 67;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_annotation : XmBulletinBoardDialog widget {
    arguments {
        XmNdialogTitle = compound_string("Annotation");
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1013;
        XmNy = 1172;
        XmNwidth = 536;
        XmNheight = 179;
    };
    controls {
         managed XmPushButton pushButton_annotation_dismiss;
         managed XmLabel slider_y_max_interval_label;
         managed XmScale slider_y_interval;
         managed XmLabel slider_y_interval_label;
         managed XmLabel slider_x_max_interval_label;
         managed XmScale slider_x_interval;
         managed XmLabel slider_x_interval_label;
    };
    callbacks {
    };
};

!(BX)object dialogShell_annotation : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 536;
!(BX)        XmNheight = 179;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_annotation;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object slider_buffer_size_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Data Buffer Size:            1");
        XmNx = 10;
        XmNy = 20;
        XmNwidth = 170;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_size : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 5000;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 10;
        XmNwidth = 260;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size);
        XmNvalueChangedCallback = procedure do_buffer_size();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_size_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 20;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Buffer Retain Size:         1");
        XmNx = 10;
        XmNy = 70;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 100;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 60;
        XmNwidth = 260;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold);
        XmNvalueChangedCallback = procedure do_buffer_hold();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 70;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_buffer_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 230;
        XmNy = 110;
        XmNwidth = 67;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_buffer");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_buffer : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 741;
        XmNy = 1002;
        XmNwidth = 536;
        XmNheight = 186;
    };
    controls {
         managed XmPushButton pushButton_buffer_dismiss;
         managed XmLabel slider_buffer_hold_max_label;
         managed XmScale slider_buffer_hold;
         managed XmLabel slider_buffer_hold_label;
         managed XmLabel slider_buffer_size_max_label;
         managed XmScale slider_buffer_size;
         managed XmLabel slider_buffer_size_label;
    };
    callbacks {
    };
};

!(BX)object dialogShell_buffer : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Buffer Controls";
!(BX)        XmNwidth = 536;
!(BX)        XmNheight = 186;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_buffer;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object pushButton_error : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("OK");
        XmNx = 110;
        XmNy = 110;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_three : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("permission in this directory!");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_three);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unable to open output file.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_one);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("You probably do not have write");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_two);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_error : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 697;
        XmNy = 1250;
        XmNwidth = 311;
        XmNheight = 205;
    };
    controls {
         managed XmLabel label_error_two;
         managed XmLabel label_error_one;
         managed XmLabel label_error_three;
         managed XmPushButton pushButton_error;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_error);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_error : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Error";
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 205;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_error;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object label_message : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("MBwedge is loading data...");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 480;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_pleasewait : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Thank you for your patience.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_message : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 883;
        XmNy = 1341;
        XmNwidth = 496;
        XmNheight = 112;
    };
    controls {
         managed XmLabel label_pleasewait;
         managed XmLabel label_message;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_message : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Please Wait...";
!(BX)        XmNmwmInputMode = MWM_INPUT_MODELESS;
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 496;
!(BX)        XmNheight = 112;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_message;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_about_mbwedge : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MBwedge");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_function : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Multibeam Sonar Water Column Dis" &
 "play Tool");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_version : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-medium-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System Release 5.1.3beta155", separate=true) &
 compound_string("May 4, 2010");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 340;
        XmNwidth = 450;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_about_version);
    };
};

object separator : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_for : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("for Processing and Display of Sw" &
 "ath Sonar Data");
        XmNx = 10;
        XmNy = 190;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_component : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("One Component of the");
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbpub : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("An Open Source Software Package");
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbsystem : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System");
        XmNx = 10;
        XmNy = 120;
        XmNwidth = 450;
        XmNheight = 38;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_columbia : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Monterey Bay", separate=true) &
 compound_string("Aquarium", separate=true) &
 compound_string("Research Institute");
        XmNx = 60;
        XmNy = 280;
        XmNwidth = 160;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_lamont : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Lamont-Doherty", separate=true) &
 compound_string("Earth Observatory", separate=true) &
 compound_string("of Columbia University");
        XmNx = 250;
        XmNy = 280;
        XmNwidth = 190;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Created by:");
        XmNx = 10;
        XmNy = 240;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_about_dismiss : XmPushButton widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Dismiss");
        XmNx = 190;
        XmNy = 410;
        XmNwidth = 90;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_about");
    };
};

object separator1 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 220;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create1 : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("David W. Caress    and    Dale N" &
 ". Chayes");
        XmNx = 10;
        XmNy = 260;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard_about : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1445;
        XmNy = 968;
        XmNwidth = 473;
        XmNheight = 501;
    };
    controls {
         managed XmLabel label_about_create1;
         managed XmSeparator separator1;
         managed XmPushButton pushButton_about_dismiss;
         managed XmLabel label_about_create;
         managed XmLabel label_about_lamont;
         managed XmLabel label_about_columbia;
         managed XmLabel label_about_mbsystem;
         managed XmLabel label_about_mbpub;
         managed XmLabel label_about_component;
         managed XmLabel label_about_for;
         managed XmSeparator separator;
         managed XmLabel label_about_version;
         managed XmLabel label_about_function;
         managed XmLabel label_about_mbwedge;
    };
    callbacks {
    };
};

!(BX)object xmDialogShell_about : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "About MBwedge";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 473;
!(BX)        XmNheight = 501;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_about;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object textfield_year_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Year:");
        XmNx = 40;
        XmNy = 10;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_month_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Month:");
        XmNx = 30;
        XmNy = 50;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_day_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Day:");
        XmNx = 40;
        XmNy = 90;
        XmNwidth = 40;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_hour_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Hour:");
        XmNx = 30;
        XmNy = 130;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_minute_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Minute:");
        XmNx = 20;
        XmNy = 170;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_second_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Second:");
        XmNx = 20;
        XmNy = 210;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_year : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1994";
        XmNcolumns = 4;
        XmNx = 90;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_year);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_month : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_month);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_hour : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 130;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_hour);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_minute : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 170;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_minute);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_second : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "0";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 210;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_second);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object button_goto_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNx = 10;
        XmNy = 270;
        XmNwidth = 75;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 do_goto_apply();
                 BxUnmanageCB("bulletinBoard_goto");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object button_goto_cancel : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Cancel");
        XmNx = 100;
        XmNy = 270;
        XmNwidth = 75;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_goto");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_day : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 90;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_day);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_goto : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 1183;
        XmNy = 1089;
        XmNwidth = 196;
        XmNheight = 346;
    };
    controls {
         managed XmTextField textfield_day;
         managed XmPushButton button_goto_cancel;
         managed XmPushButton button_goto_apply;
         managed XmTextField textfield_second;
         managed XmTextField textfield_minute;
         managed XmTextField textfield_hour;
         managed XmTextField textfield_month;
         managed XmTextField textfield_year;
         managed XmLabel textfield_second_label;
         managed XmLabel textfield_minute_label;
         managed XmLabel textfield_hour_label;
         managed XmLabel textfield_day_label;
         managed XmLabel textfield_month_label;
         managed XmLabel textfield_year_label;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_goto : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Go To Specified Time";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 196;
!(BX)        XmNheight = 346;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_goto;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object textfield_format : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "41";
        XmNcolumns = 3;
        XmNmaxLength = 3;
        XmNx = 140;
        XmNy = 420;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_format);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_format_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("MBIO Format ID:");
        XmNx = 10;
        XmNy = 430;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_format_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object fileSelectionBox : XmFileSelectionBox widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 500;
        XmNheight = 400;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Apply managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_DirList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Dir managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
       XmNokCallback = procedures {
                 do_load_check();
                 BxUnmanageCB("bulletinBoard_file");
        };
        XmNcancelCallback = procedure BxUnmanageCB("bulletinBoard_file");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_file : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 429;
        XmNy = 617;
        XmNwidth = 529;
        XmNheight = 476;
    };
    controls {
         managed XmFileSelectionBox fileSelectionBox;
         managed XmLabel textfield_format_label;
         managed XmTextField textfield_format;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_file : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Open Source Swath Sonar Data Fil" &
!(BX) "e";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 529;
!(BX)        XmNheight = 476;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_file;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object canvas_mbwedge : XmDrawingArea widget {
    arguments {
        arguments Style_use;
        XmNborderWidth = 1;
        XmNbackground = color('white');
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 0;
        XmNy = 120;
        XmNwidth = 740;
        XmNheight = 690;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_canvas_mbwedge);
        XmNinputCallback = procedure do_event();
        XmNexposeCallback = procedure do_expose();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_max_step_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20");
        XmNrecomputeSize = false;
        XmNx = 410;
        XmNy = 50;
        XmNwidth = 30;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_max_step_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_step : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 5;
        XmNmaximum = 20;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 180;
        XmNy = 40;
        XmNwidth = 230;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_step);
        XmNvalueChangedCallback = procedure do_number_step();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_step_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Pings to step:  1");
        XmNx = 60;
        XmNy = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_step_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_playbackspeed_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20");
        XmNrecomputeSize = false;
        XmNx = 410;
        XmNy = 90;
        XmNwidth = 30;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_playbackspeed_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_playbackspeed : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 2;
        XmNmaximum = 20;
        XmNscaleHeight = 15;
        XmNshowArrows = TRUE;
        XmNscaleMultiple = 1;
        XmNshowValue = TRUE;
        XmNorientation = XmHORIZONTAL;
        XmNx = 180;
        XmNy = 80;
        XmNwidth = 230;
        XmNheight = 34;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_playbackspeed);
        XmNvalueChangedCallback = procedure do_scale_playbackspeed();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_playbackspeed_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Playback Speed (Hz):  1");
        XmNx = 10;
        XmNy = 90;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_playbackspeed_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_quit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Quit");
        XmNx = 580;
        XmNy = 0;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_quit();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_reverse : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Reverse");
        XmNx = 510;
        XmNy = 40;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_reverse);
        XmNactivateCallback = procedure do_reverse();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_forward : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Forward");
        XmNx = 580;
        XmNy = 40;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_forward);
        XmNactivateCallback = procedure do_forward();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_done : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Done");
        XmNx = 510;
        XmNy = 0;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_done);
        XmNactivateCallback = procedure do_done();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_next : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Next Buffer");
        XmNx = 350;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_next);
        XmNactivateCallback = procedure do_next_buffer();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_about : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("About");
        XmNx = 650;
        XmNy = 0;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_about");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_goto : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Go To Specified Time...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_goto");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_buffer : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Buffer Controls...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_buffer");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_annotation : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Annotation...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_annotation");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_controls : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 169;
        XmNheight = 76;
    };
    controls {
         managed XmPushButton pushButton_goto;
         managed XmPushButton pushButton_buffer;
         managed XmPushButton pushButton_annotation;
    };
    callbacks {
    };
};

object cascadeButton_controls : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Controls");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 77;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_controls;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_controls : XmMenuBar widget {
    arguments {
        XmNx = 170;
        XmNy = 0;
        XmNwidth = 87;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton cascadeButton_controls;
    };
    callbacks {
    };
};

object pushButton_stop : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Stop");
        XmNx = 580;
        XmNy = 70;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_stop();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_view_linear : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Linear Ramp");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_view_linear);
        XmNvalueChangedCallback = procedure do_view_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_view_log : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Logarithmic Ramp");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_view_log);
        XmNvalueChangedCallback = procedure do_view_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_view_histogram : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Histogram Equalize");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_view_histogram);
        XmNvalueChangedCallback = procedure do_view_mode();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_view : XmPulldownMenu widget {
    arguments {
        XmNx = 666;
        XmNy = 108;
        XmNwidth = 158;
        XmNheight = 76;
    };
    controls {
         managed XmToggleButton toggleButton_view_linear;
         managed XmToggleButton toggleButton_view_log;
         managed XmToggleButton toggleButton_view_histogram;
    };
    callbacks {
    };
};

object cascadeButton_view : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("View");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 48;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_view;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_view : XmMenuBar widget {
    arguments {
        XmNpacking = XmPACK_TIGHT;
        XmNx = 90;
        XmNy = 0;
        XmNwidth = 58;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton cascadeButton_view;
    };
    callbacks {
    };
};

object pushButton_file : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("File");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_file);
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_file");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_play : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Play");
        XmNx = 510;
        XmNy = 70;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_play();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_start : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Start");
        XmNx = 440;
        XmNy = 40;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_start);
        XmNactivateCallback = procedure do_start();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_end : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("End");
        XmNx = 650;
        XmNy = 40;
        XmNwidth = 70;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_end);
        XmNactivateCallback = procedure do_end();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object controls_mbwedge : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 1040;
        XmNheight = 120;
    };
    controls {
         managed XmPushButton pushButton_end;
         managed XmPushButton pushButton_start;
         managed XmPushButton pushButton_play;
         managed XmPushButton pushButton_file;
         managed XmMenuBar menuBar_view;
         managed XmPushButton pushButton_stop;
         managed XmMenuBar menuBar_controls;
         managed XmPushButton pushButton_about;
         managed XmPushButton pushButton_next;
         managed XmPushButton pushButton_done;
         managed XmPushButton pushButton_forward;
         managed XmPushButton pushButton_reverse;
         managed XmPushButton pushButton_quit;
         managed XmLabel slider_scale_playbackspeed_label;
         managed XmScale slider_scale_playbackspeed;
         managed XmLabel slider_scale_playbackspeed_max_label;
         managed XmLabel slider_number_step_label;
         managed XmScale slider_number_step;
         managed XmLabel slider_number_max_step_label;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object mbwedge_bboard : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNnoResize = false;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 750;
        XmNheight = 817;
    };
    controls {
         managed XmBulletinBoard controls_mbwedge;
         managed XmDrawingArea canvas_mbwedge;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object window_mbwedge : XmMainWindow widget {
    arguments {
        arguments Style_use;
        XmNx = 571;
        XmNy = 79;
        XmNwidth = 750;
        XmNheight = 817;
    };
    controls {
        Xm_Separator1 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator2 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator3 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
!(BX)         unmanaged XmDialogShell dialogShell_annotation;
!(BX)         unmanaged XmDialogShell dialogShell_buffer;
!(BX)         unmanaged XmDialogShell xmDialogShell_error;
!(BX)         unmanaged XmDialogShell xmDialogShell_message;
!(BX)         unmanaged XmDialogShell xmDialogShell_about;
!(BX)         unmanaged XmDialogShell xmDialogShell_goto;
!(BX)         unmanaged XmDialogShell xmDialogShell_file;
         managed XmBulletinBoard mbwedge_bboard;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_window_mbwedge);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "MBwedge";
!(BX)        XmNiconName = "MBwedge";
!(BX)        XmNallowShellResize = false;
!(BX)        XmNdeleteResponse = XmDESTROY;
!(BX)        XmNx = 571;
!(BX)        XmNy = 79;
!(BX)        XmNwidth = 750;
!(BX)        XmNheight = 817;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow window_mbwedge;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)        XmNdestroyCallback = procedure do_quit();
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};
end module;
