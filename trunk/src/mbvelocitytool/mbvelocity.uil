/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Personal Edition Version 5.0.5.
 *
 * Identification: $Id: mbvelocity.uil,v 4.9 1999-07-16 19:22:27 caress Exp $
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-lXm -lXt -lXext -lX11 -lgen -lm")
!(BX) bx_info("c_cflags", "-Aa -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_information", "")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "false")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "MB-system")
!(BX) bx_info("c_class", "MB-system")
!(BX) bx_info("c_app_defaults", "mbvelocitytool", true)
!(BX) bx_info("c_utilities", "mbvelocity_bxutils.c", true)
!(BX) bx_info("c_constants", "mbvelocity_creation.h", true)
!(BX) bx_info("c_callbacks", "mbvelocity_callbacks.c", true)
!(BX) bx_info("c_creation", "mbvelocity_creation.c", true)
!(BX) bx_info("c_main", "mbvelocity.c", true)
!(BX) bx_info("c_makefile", "Makefile.org", true)
!(BX) bx_info("c_imakefile", "Imakefile", true)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("system_directory", "/opt/bxpro-5.0")
!(BX) bx_info("builder_version", "Builder Xcessory Personal Edition Version 5.0.5")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

procedure BxGlobalWidgetId;
identifier BXG_drawingArea;
identifier BXG_label_status_display;
identifier BXG_label_status_edit;
identifier BXG_label_status_mb;
identifier BXG_label_message;
identifier BXG_bulletinBoard_message;
identifier BXG_label_mbformat;
identifier BXG_textField_mbformat;
identifier BXG_fileSelectionBox;
identifier BXG_xmDialogShell_fileselect;
identifier BXG_label_error_two;
identifier BXG_label_error_one;
identifier BXG_label_error_three;
identifier BXG_bulletinBoard_error;
identifier BXG_label_res_range_max;
identifier BXG_slider_residual_range;
identifier BXG_label_vel_range_max;
identifier BXG_slider_velrange;
identifier BXG_label_max_depth_max;
identifier BXG_slider_maxdepth;
procedure BxManageCB(string);
procedure BxUnmanageCB(string);
procedure BxSetValuesCB(string);
procedure do_maxdepth();
procedure do_velrange(integer);
procedure do_residual_range();
procedure do_process_mb();
procedure do_quit();
procedure do_expose();
procedure do_new_profile();
procedure do_open();
procedure do_canvas_event();
procedure do_io_mode_mb();
procedure do_io_mode_save_svp();
procedure do_io_mode_open_svp_edit();
procedure do_io_mode_open_svp_display();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list Style_use : arguments {
        arguments BaseStyle;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list Style_useReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list Style_useHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


object label_max_depth : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Maximum Depth (m):     1");
        XmNx = 10;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_maxdepth : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 3000;
        XmNmaximum = 13000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNhighlightThickness = 1;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 10;
        XmNwidth = 270;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_maxdepth);
        XmNvalueChangedCallback = procedure do_maxdepth();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_max_depth_max : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("13000");
        XmNrecomputeSize = false;
        XmNx = 470;
        XmNy = 10;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_max_depth_max);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_velrange : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Velocity Range (m/s): 25");
        XmNx = 10;
        XmNy = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_velrange : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 25;
        XmNvalue = 500;
        XmNmaximum = 1000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNhighlightThickness = 1;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 40;
        XmNwidth = 270;
        XmNheight = 30;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_velrange);
        XmNvalueChangedCallback = procedure do_velrange();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_vel_range_max : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("1000");
        XmNrecomputeSize = false;
        XmNx = 470;
        XmNy = 50;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_vel_range_max);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_residual_range : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Residual Range (m):    1");
        XmNx = 10;
        XmNy = 90;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_residual_range : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNdecimalPoints = 1;
        XmNvalue = 100;
        XmNtitleString = compound_string("");
        XmNmaximum = 2000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNhighlightThickness = 1;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 80;
        XmNwidth = 270;
        XmNheight = 30;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_residual_range);
        XmNvalueChangedCallback = procedure do_residual_range();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_res_range_max : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("200");
        XmNrecomputeSize = false;
        XmNx = 470;
        XmNy = 90;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_res_range_max);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_scaling_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 230;
        XmNy = 120;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_scaling");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_scaling : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 245;
        XmNy = 614;
        XmNwidth = 532;
        XmNheight = 164;
    };
    controls {
         managed XmPushButton pushButton_scaling_dismiss;
         managed XmLabel label_res_range_max;
         managed XmScale slider_residual_range;
         managed XmLabel label_residual_range;
         managed XmLabel label_vel_range_max;
         managed XmScale slider_velrange;
         managed XmLabel label_velrange;
         managed XmLabel label_max_depth_max;
         managed XmScale slider_maxdepth;
         managed XmLabel label_max_depth;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_scaling : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Plot Scaling";
!(BX)        XmNwidth = 532;
!(BX)        XmNheight = 164;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_scaling;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object pushButton_error : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("OK");
        XmNx = 110;
        XmNy = 110;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_three : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("permission in this directory!");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_three);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unable to open output file.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_one);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("You probably do not have write");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_two);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_error : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 355;
        XmNy = 615;
        XmNwidth = 311;
        XmNheight = 161;
    };
    controls {
         managed XmLabel label_error_two;
         managed XmLabel label_error_one;
         managed XmLabel label_error_three;
         managed XmPushButton pushButton_error;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_error);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_error : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Error";
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 161;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_error;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object fileSelectionBox : XmFileSelectionBox widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 2;
        XmNmarginWidth = 2;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 570;
        XmNheight = 470;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_FilterLabel managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_FilterText managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_DirList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Dir managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Apply managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
       XmNokCallback = procedures {
                 do_open();
                 BxUnmanageCB("bulletinBoard_fileselect");
        };
        XmNcancelCallback = procedure BxUnmanageCB("bulletinBoard_fileselect");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textField_mbformat : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNborderWidth = 1;
        XmNvalue = "1";
        XmNcolumns = 5;
        XmNmaxLength = 5;
        XmNresizeWidth = false;
        XmNcursorPosition = 1;
        XmNhighlightOnEnter = false;
        XmNmarginHeight = 2;
        XmNshadowThickness = 0;
        XmNhighlightThickness = 0;
        XmNmarginWidth = 2;
        XmNx = 210;
        XmNy = 490;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textField_mbformat);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_mbformat : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Swath Sonar Format ID:");
        XmNx = 20;
        XmNy = 490;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_mbformat);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_fileselect : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 215;
        XmNy = 255;
        XmNwidth = 591;
        XmNheight = 537;
    };
    controls {
         managed XmLabel label_mbformat;
         managed XmTextField textField_mbformat;
         managed XmFileSelectionBox fileSelectionBox;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_fileselect : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Open Swath Sonar Data";
!(BX)        XmNwidth = 591;
!(BX)        XmNheight = 537;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_fileselect;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xmDialogShell_fileselect);
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_message : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("MBvelocitytool is loading data.." &
 ".");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_pleasewait : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Thank you for your patience.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_message : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 321;
        XmNy = 653;
        XmNwidth = 379;
        XmNheight = 86;
    };
    controls {
         managed XmLabel label_pleasewait;
         managed XmLabel label_message;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_message : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Please Wait...";
!(BX)        XmNmwmInputMode = MWM_INPUT_MODELESS;
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 379;
!(BX)        XmNheight = 86;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_message;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_about_mbedit : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MBvelocitytool");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 460;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_function : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Interactive SVP Modeler/Editor");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 460;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_version : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-medium-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System Release 4.6", separate=true) &
 compound_string("April 14, 1999");
        XmNx = 10;
        XmNy = 340;
        XmNwidth = 460;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator : XmSeparator widget {
    arguments {
        arguments Style_use;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 460;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_for : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("for Processing and Display of Sw" &
 "ath Sonar Data");
        XmNx = 10;
        XmNy = 190;
        XmNwidth = 460;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_component : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("One Component of the");
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_mbpub : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("A Public Domain Software Package" &
 "");
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_mbsystem : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System");
        XmNx = 10;
        XmNy = 120;
        XmNwidth = 450;
        XmNheight = 38;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_columbia : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Monterey Bay", separate=true) &
 compound_string("Aquarium", separate=true) &
 compound_string("Research Institute");
        XmNx = 70;
        XmNy = 280;
        XmNwidth = 140;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_lamont : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Lamont-Doherty", separate=true) &
 compound_string("Earth Observatory", separate=true) &
 compound_string("of Columbia University");
        XmNx = 250;
        XmNy = 280;
        XmNwidth = 180;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_about_create : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Created by:", separate=true) &
 compound_string("David W. Caress    and    Dale N. Chayes");
        XmNx = 10;
        XmNy = 240;
        XmNwidth = 450;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_about_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Dismiss");
        XmNx = 200;
        XmNy = 390;
        XmNwidth = 80;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_about");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator2 : XmSeparator widget {
    arguments {
        arguments Style_use;
        XmNx = 10;
        XmNy = 220;
        XmNwidth = 460;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_about : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 270;
        XmNy = 358;
        XmNwidth = 481;
        XmNheight = 434;
    };
    controls {
         managed XmSeparator separator2;
         managed XmPushButton pushButton_about_dismiss;
         managed XmLabel label_about_create;
         managed XmLabel label_about_lamont;
         managed XmLabel label_about_columbia;
         managed XmLabel label_about_mbsystem;
         managed XmLabel label_about_mbpub;
         managed XmLabel label_about_component;
         managed XmLabel label_about_for;
         managed XmSeparator separator;
         managed XmLabel label_about_version;
         managed XmLabel label_about_function;
         managed XmLabel label_about_mbedit;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_about : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "About MBedit";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 481;
!(BX)        XmNheight = 434;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_about;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_status_mb : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("No MultiBeam Data Loaded");
        XmNx = 0;
        XmNy = 80;
        XmNwidth = 1010;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_status_mb);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_status_edit : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("No Editable Sound Velocity Profi" &
 "le Loaded");
        XmNx = 0;
        XmNy = 60;
        XmNwidth = 1010;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_status_edit);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_status_display : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("No Display Sound Velocity Profil" &
 "es Loaded");
        XmNx = 0;
        XmNy = 40;
        XmNwidth = 1010;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_status_display);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object drawingArea : XmDrawingArea widget {
    arguments {
        arguments Style_use;
        XmNborderWidth = 1;
        XmNbackground = color('white');
        XmNx = 0;
        XmNy = 100;
        XmNwidth = 1010;
        XmNheight = 560;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drawingArea);
        XmNinputCallback = procedure do_canvas_event();
        XmNexposeCallback = procedure do_expose();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_process : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Reprocess");
        XmNx = 430;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_process_mb();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_quit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Quit");
        XmNx = 680;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_quit();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_about : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("About");
        XmNx = 930;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_about");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_open_svp_display : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Open display profile");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselect");
                 do_io_mode_open_svp_display();
                 BxUnmanageCB("label_mbformat");
                 BxUnmanageCB("textField_mbformat");
                 BxSetValuesCB("xmDialogShell_fileselect.title=" &
 "Open Display Sound Velocity Profile (SVP)");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_open_svp_edit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Open editable profile");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselect");
                 do_io_mode_open_svp_edit();
                 BxUnmanageCB("label_mbformat");
                 BxUnmanageCB("textField_mbformat");
                 BxSetValuesCB("xmDialogShell_fileselect.title=" &
 "Open Editable Sound Velocity Profile (SVP)");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_new_svp_edit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("New editable profile...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_new_profile();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_save_svp : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Save editable profile");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselect");
                 do_io_mode_save_svp();
                 BxUnmanageCB("label_mbformat");
                 BxUnmanageCB("textField_mbformat");
                 BxSetValuesCB("xmDialogShell_fileselect.title=" &
 "Save Editable Sound Velocity Profile (SVP)");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object separator1 : XmSeparator widget {
    arguments {
        arguments Style_use;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_open_mb : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Open swath sonar data");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 BxManageCB("bulletinBoard_fileselect");
                 do_io_mode_mb();
                 BxManageCB("label_mbformat");
                 BxManageCB("textField_mbformat");
                 BxSetValuesCB("xmDialogShell_fileselect.title=" &
 "Open Swath Sonar Data");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_file : XmPulldownMenu widget {
    arguments {
        arguments Style_use;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 172;
        XmNheight = 126;
    };
    controls {
         managed XmPushButton pushButton_open_svp_display;
         managed XmPushButton pushButton_open_svp_edit;
         managed XmPushButton pushButton_new_svp_edit;
         managed XmPushButton pushButton_save_svp;
         managed XmSeparator separator1;
         managed XmPushButton pushButton_open_mb;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object cascadeButton_file : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("    File    ");
        XmNx = 2;
        XmNy = 2;
        XmNwidth = 73;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_file;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_file : XmMenuBar widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNwidth = 77;
        XmNheight = 28;
    };
    controls {
         managed XmCascadeButton cascadeButton_file;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object rowColumn : XmRowColumn widget {
    arguments {
        arguments Style_use;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 83;
        XmNheight = 34;
    };
    controls {
         managed XmMenuBar menuBar_file;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Plot Scaling");
        XmNx = 210;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_scaling");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object input_screen : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 1016;
        XmNheight = 668;
    };
    controls {
         managed XmPushButton pushButton;
         managed XmRowColumn rowColumn;
         managed XmPushButton pushButton_about;
         managed XmPushButton pushButton_quit;
         managed XmPushButton pushButton_process;
         managed XmDrawingArea drawingArea;
         managed XmLabel label_status_display;
         managed XmLabel label_status_edit;
         managed XmLabel label_status_mb;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object window_mbvelocity : XmMainWindow widget {
    arguments {
        arguments Style_use;
        XmNx = 4;
        XmNy = 50;
        XmNwidth = 1016;
        XmNheight = 668;
    };
    controls {
        Xm_Separator1 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator2 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator3 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
!(BX)         unmanaged XmDialogShell xmDialogShell_scaling;
!(BX)         unmanaged XmDialogShell xmDialogShell_error;
!(BX)         unmanaged XmDialogShell xmDialogShell_fileselect;
!(BX)         unmanaged XmDialogShell xmDialogShell_message;
!(BX)         unmanaged XmDialogShell xmDialogShell_about;
         managed XmBulletinBoard input_screen;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "MBvelocityTool";
!(BX)        XmNiconName = "MBvelocitytool";
!(BX)        XmNx = -1;
!(BX)        XmNy = 26;
!(BX)        XmNwidth = 1016;
!(BX)        XmNheight = 668;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow window_mbvelocity;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)        XmNdestroyCallback = procedure do_quit();
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};
end module;
