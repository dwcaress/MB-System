/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Version 5.0.3.
 *
 * Identification: 
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-lGLw -lSgm -lXm -lXt -lGL -lXext -lX11 -lgen -lm")
!(BX) bx_info("c_cflags", "-Aa -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_information", "")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "false")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "mbedit")
!(BX) bx_info("c_class", "mbedit")
!(BX) bx_info("c_app_defaults", "mbedit", true)
!(BX) bx_info("c_utilities", "mbedit_bxutils.c", true)
!(BX) bx_info("c_constants", "mbedit_creation.h", true)
!(BX) bx_info("c_callbacks", "mbedit_callbacks.c", true)
!(BX) bx_info("c_creation", "mbedit_creation.c", true)
!(BX) bx_info("c_main", "mbedit.c", true)
!(BX) bx_info("c_makefile", "Makefile.org", true)
!(BX) bx_info("c_imakefile", "Imakefile", true)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("system_directory", "/usr/bx50")
!(BX) bx_info("builder_version", "Builder Xcessory Version 5.0.3")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

procedure BxGlobalWidgetId;
identifier BXG_pushButton_file;
identifier BXG_toggleButton_show_flagged_off;
identifier BXG_toggleButton_show_flagged_on;
identifier BXG_slider_scale_x_label;
identifier BXG_slider_scale_x;
identifier BXG_slider_scale_x_max_label;
identifier BXG_slider_scale_y_label;
identifier BXG_slider_scale_y;
identifier BXG_slider_scale_y_max_label;
identifier BXG_slider_number_pings_label;
identifier BXG_slider_number_pings;
identifier BXG_slider_num_pings_max_label;
identifier BXG_slider_number_step_label;
identifier BXG_slider_number_step;
identifier BXG_slider_number_max_step_label;
identifier BXG_setting_mode_toggle_restore;
identifier BXG_setting_mode_toggle_erase;
identifier BXG_setting_mode_toggle_pick;
identifier BXG_setting_mode_toggle_toggle;
identifier BXG_canvas_mbedit;
identifier BXG_fileSelectionBox;
identifier BXG_textfield_format_label;
identifier BXG_textfield_format;
identifier BXG_setting_output_label;
identifier BXG_setting_output_toggle_browse;
identifier BXG_setting_output_toggle_output;
identifier BXG_setting_output;
identifier BXG_output_file_label;
identifier BXG_output_file_text;
identifier BXG_textfield_day;
identifier BXG_textfield_second;
identifier BXG_textfield_minute;
identifier BXG_textfield_hour;
identifier BXG_textfield_month;
identifier BXG_textfield_year;
identifier BXG_label_about_version;
identifier BXG_label_message;
identifier BXG_bulletinBoard_message;
identifier BXG_bulletinBoard_editsave;
identifier BXG_label_error_two;
identifier BXG_label_error_one;
identifier BXG_label_error_three;
identifier BXG_bulletinBoard_error;
identifier BXG_slider_buffer_hold_max_label;
identifier BXG_slider_buffer_hold;
identifier BXG_slider_buffer_hold_label;
identifier BXG_slider_buffer_size_max_label;
identifier BXG_slider_buffer_size;
identifier BXG_slider_buffer_size_label;
identifier BXG_slider_y_max_interval_label;
identifier BXG_slider_y_interval;
identifier BXG_slider_y_interval_label;
identifier BXG_slider_x_max_interval_label;
identifier BXG_slider_x_interval;
identifier BXG_slider_x_interval_label;
identifier BXG_window_mbedit;
procedure BxManageCB(string);
procedure BxUnmanageCB;
procedure do_fileselection_init();
procedure do_load_ok();
procedure do_next_buffer();
procedure do_buffer_size();
procedure do_buffer_hold();
procedure do_done();
procedure do_forward();
procedure do_reverse();
procedure do_quit();
procedure do_number_pings();
procedure do_number_step();
procedure do_scale_x();
procedure do_scale_y();
procedure do_mode_pick();
procedure do_mode_erase();
procedure do_mode_restore();
procedure do_output_output();
procedure do_output_browse();
procedure do_x_interval();
procedure do_y_interval();
procedure do_event();
procedure do_goto_apply();
procedure do_expose();
procedure do_load_check();
procedure do_load_ok_with_save();
procedure do_show_flagged_on();
procedure do_show_flagged_off();
procedure do_mode_toggle();
procedure do_unflag_view();
procedure do_unflag_all();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list Style_use : arguments {
        arguments BaseStyle;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list Style_useReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list Style_useHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


object slider_x_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("X Axis Tick Interval (m): 1");
        XmNx = 20;
        XmNy = 10;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_x_interval : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 1000;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 200;
        XmNy = 10;
        XmNwidth = 250;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_interval);
        XmNvalueChangedCallback = procedure do_x_interval();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_x_max_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 10;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_x_max_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Y Axis Tick Interval (m): 1");
        XmNx = 10;
        XmNy = 60;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_interval : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 250;
        XmNmaximum = 1000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 200;
        XmNy = 50;
        XmNwidth = 250;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_interval);
        XmNvalueChangedCallback = procedure do_y_interval();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_y_max_interval_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("1000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 60;
        XmNwidth = 65;
        XmNheight = 15;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_y_max_interval_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_annotation_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 230;
        XmNy = 100;
        XmNwidth = 67;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_annotation : XmBulletinBoardDialog widget {
    arguments {
        XmNdialogTitle = compound_string("Annotation");
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 536;
        XmNheight = 135;
    };
    controls {
         managed XmPushButton pushButton_annotation_dismiss;
         managed XmLabel slider_y_max_interval_label;
         managed XmScale slider_y_interval;
         managed XmLabel slider_y_interval_label;
         managed XmLabel slider_x_max_interval_label;
         managed XmScale slider_x_interval;
         managed XmLabel slider_x_interval_label;
    };
    callbacks {
    };
};

!(BX)object dialogShell_annotation : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 536;
!(BX)        XmNheight = 135;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_annotation;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object slider_buffer_size_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Data Buffer Size:            1");
        XmNx = 10;
        XmNy = 20;
        XmNwidth = 170;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_size : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 5000;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 10;
        XmNwidth = 250;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size);
        XmNvalueChangedCallback = procedure do_buffer_size();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_size_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 20;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_size_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Buffer Retain Size:         1");
        XmNx = 10;
        XmNy = 70;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 100;
        XmNmaximum = 5000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 190;
        XmNy = 60;
        XmNwidth = 250;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold);
        XmNvalueChangedCallback = procedure do_buffer_hold();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_buffer_hold_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("5000");
        XmNrecomputeSize = false;
        XmNx = 460;
        XmNy = 70;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_buffer_hold_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_buffer_dismiss : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Dismiss");
        XmNx = 230;
        XmNy = 110;
        XmNwidth = 67;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_buffer");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_buffer : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 536;
        XmNheight = 142;
    };
    controls {
         managed XmPushButton pushButton_buffer_dismiss;
         managed XmLabel slider_buffer_hold_max_label;
         managed XmScale slider_buffer_hold;
         managed XmLabel slider_buffer_hold_label;
         managed XmLabel slider_buffer_size_max_label;
         managed XmScale slider_buffer_size;
         managed XmLabel slider_buffer_size_label;
    };
    callbacks {
    };
};

!(BX)object dialogShell_buffer : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Buffer Controls";
!(BX)        XmNwidth = 536;
!(BX)        XmNheight = 142;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_buffer;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object pushButton_error : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("OK");
        XmNx = 110;
        XmNy = 110;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_three : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("permission in this directory!");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_three);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unable to open output file.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_one);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_error_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("You probably do not have write");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_error_two);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_error : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 311;
        XmNheight = 161;
    };
    controls {
         managed XmLabel label_error_two;
         managed XmLabel label_error_one;
         managed XmLabel label_error_three;
         managed XmPushButton pushButton_error;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_error);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_error : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Error";
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 161;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_error;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object pushButton_editsave_yes : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Yes");
        XmNx = 100;
        XmNy = 80;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_load_ok_with_save();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_editsave_no : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("No");
        XmNx = 250;
        XmNy = 80;
        XmNwidth = 90;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_load_ok();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_editsave_two : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Do you want to apply the saved e" &
 "dits to the data?");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 410;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_editsave_one : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("An edit save file exists for the" &
 " specified input data file...");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 410;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_editsave : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 431;
        XmNheight = 133;
    };
    controls {
         managed XmLabel label_editsave_one;
         managed XmLabel label_editsave_two;
         managed XmPushButton pushButton_editsave_no;
         managed XmPushButton pushButton_editsave_yes;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_editsave);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_editsave : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Use MBedit edit save file?";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 431;
!(BX)        XmNheight = 133;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_editsave;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_message : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("MBedit is loading data...");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_pleasewait : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Thank you for your patience.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 360;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_message : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 379;
        XmNheight = 86;
    };
    controls {
         managed XmLabel label_pleasewait;
         managed XmLabel label_message;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bulletinBoard_message);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_message : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Please Wait...";
!(BX)        XmNmwmInputMode = MWM_INPUT_MODELESS;
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 379;
!(BX)        XmNheight = 86;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_message;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object label_about_mbedit : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MBedit");
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_function : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Interactive Swath Bathymetry Edi" &
 "tor");
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_version : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-medium-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System Release 4.6", separate=true) &
 compound_string("April 14, 1999");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 340;
        XmNwidth = 450;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label_about_version);
    };
};

object separator : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_for : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("for Processing and Display of Sw" &
 "ath Sonar Data");
        XmNx = 10;
        XmNy = 190;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_component : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("One Component of the");
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbpub : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("A Public Domain Software Package" &
 "");
        XmNx = 10;
        XmNy = 160;
        XmNwidth = 450;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_mbsystem : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-240-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("MB-System");
        XmNx = 10;
        XmNy = 120;
        XmNwidth = 450;
        XmNheight = 38;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_columbia : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Monterey Bay", separate=true) &
 compound_string("Aquarium", separate=true) &
 compound_string("Research Institute");
        XmNx = 60;
        XmNy = 280;
        XmNwidth = 160;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_lamont : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-120-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Lamont-Doherty", separate=true) &
 compound_string("Earth Observatory", separate=true) &
 compound_string("of Columbia University");
        XmNx = 250;
        XmNy = 280;
        XmNwidth = 190;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
    };
};

object label_about_create : XmLabel widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Created by:", separate=true) &
 compound_string("David W. Caress    and    Dale N. Chayes");
        XmNx = 10;
        XmNy = 240;
        XmNwidth = 450;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton_about_dismiss : XmPushButton widget {
    arguments {
        XmNfontList = font_table(
		font('-*-times-bold-r-*-*-*-140-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("Dismiss");
        XmNx = 190;
        XmNy = 410;
        XmNwidth = 90;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_about");
    };
};

object separator1 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 220;
        XmNwidth = 450;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard_about : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 473;
        XmNheight = 457;
    };
    controls {
         managed XmSeparator separator1;
         managed XmPushButton pushButton_about_dismiss;
         managed XmLabel label_about_create;
         managed XmLabel label_about_lamont;
         managed XmLabel label_about_columbia;
         managed XmLabel label_about_mbsystem;
         managed XmLabel label_about_mbpub;
         managed XmLabel label_about_component;
         managed XmLabel label_about_for;
         managed XmSeparator separator;
         managed XmLabel label_about_version;
         managed XmLabel label_about_function;
         managed XmLabel label_about_mbedit;
    };
    callbacks {
    };
};

!(BX)object xmDialogShell_about : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "About MBedit";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 473;
!(BX)        XmNheight = 457;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_about;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object textfield_year_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Year:");
        XmNx = 40;
        XmNy = 10;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_month_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Month:");
        XmNx = 30;
        XmNy = 50;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_day_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Day:");
        XmNx = 40;
        XmNy = 90;
        XmNwidth = 40;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_hour_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Hour:");
        XmNx = 30;
        XmNy = 130;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_minute_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Minute:");
        XmNx = 20;
        XmNy = 170;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_second_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Second:");
        XmNx = 20;
        XmNy = 210;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_year : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1994";
        XmNcolumns = 4;
        XmNx = 90;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_year);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_month : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 50;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_month);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_hour : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 130;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_hour);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_minute : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 170;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_minute);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_second : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "0";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 210;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_second);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object button_goto_apply : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Apply");
        XmNx = 10;
        XmNy = 270;
        XmNwidth = 75;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
       XmNactivateCallback = procedures {
                 do_goto_apply();
                 BxUnmanageCB("bulletinBoard_goto");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object button_goto_cancel : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Cancel");
        XmNx = 100;
        XmNy = 270;
        XmNwidth = 75;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxUnmanageCB("bulletinBoard_goto");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_day : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "1";
        XmNcolumns = 2;
        XmNx = 90;
        XmNy = 90;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_day);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_goto : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 196;
        XmNheight = 302;
    };
    controls {
         managed XmTextField textfield_day;
         managed XmPushButton button_goto_cancel;
         managed XmPushButton button_goto_apply;
         managed XmTextField textfield_second;
         managed XmTextField textfield_minute;
         managed XmTextField textfield_hour;
         managed XmTextField textfield_month;
         managed XmTextField textfield_year;
         managed XmLabel textfield_second_label;
         managed XmLabel textfield_minute_label;
         managed XmLabel textfield_hour_label;
         managed XmLabel textfield_day_label;
         managed XmLabel textfield_month_label;
         managed XmLabel textfield_year_label;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_goto : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Go To Specified Time";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 196;
!(BX)        XmNheight = 302;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_goto;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object output_file_text : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "./testeee.mb21";
        XmNcolumns = 40;
        XmNmaxLength = 130;
        XmNx = 10;
        XmNy = 520;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_output_file_text);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object output_file_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Output file name:");
        XmNx = 10;
        XmNy = 500;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_output_file_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output_toggle_output : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Output Edited Data");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_output_toggle_output);
        XmNvalueChangedCallback = procedure do_output_output();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output_toggle_browse : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Browse Only");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_output_toggle_browse);
        XmNvalueChangedCallback = procedure do_output_browse();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output : XmRowColumn widget {
    arguments {
        arguments Style_use;
        XmNnumColumns = 1;
        XmNpacking = XmPACK_COLUMN;
        XmNradioBehavior = true;
        XmNspacing = 0;
        XmNorientation = XmVERTICAL;
        XmNx = 220;
        XmNy = 440;
        XmNwidth = 167;
        XmNheight = 62;
    };
    controls {
         managed XmToggleButton setting_output_toggle_output;
         managed XmToggleButton setting_output_toggle_browse;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_output);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_output_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Output Mode:");
        XmNmarginWidth = 0;
        XmNx = 220;
        XmNy = 420;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_output_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_format : XmTextField widget {
    arguments {
        arguments Style_use;
        XmNvalue = "41";
        XmNcolumns = 3;
        XmNmaxLength = 3;
        XmNx = 140;
        XmNy = 420;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_format);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object textfield_format_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("MBIO Format ID:");
        XmNx = 10;
        XmNy = 430;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_textfield_format_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object fileSelectionBox : XmFileSelectionBox widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 500;
        XmNheight = 400;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_DirList managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Dir managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Apply managed {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
       XmNokCallback = procedures {
                 do_load_check();
                 BxUnmanageCB("bulletinBoard_file");
        };
        XmNcancelCallback = procedure BxUnmanageCB("bulletinBoard_file");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object bulletinBoard_file : XmBulletinBoardDialog widget {
    arguments {
        arguments Style_use;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 521;
        XmNheight = 573;
    };
    controls {
         managed XmFileSelectionBox fileSelectionBox;
         managed XmLabel textfield_format_label;
         managed XmTextField textfield_format;
         managed XmLabel setting_output_label;
         managed XmRowColumn setting_output;
         managed XmLabel output_file_label;
         managed XmTextField output_file_text;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object xmDialogShell_file : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "Open Swath Sonar Data File";
!(BX)        XmNdeleteResponse = XmUNMAP;
!(BX)        XmNwidth = 521;
!(BX)        XmNheight = 573;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog bulletinBoard_file;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};

object canvas_mbedit : XmDrawingArea widget {
    arguments {
        arguments Style_use;
        XmNborderWidth = 1;
        XmNbackground = color('white');
        XmNx = 0;
        XmNy = 150;
        XmNwidth = 1010;
        XmNheight = 510;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_canvas_mbedit);
        XmNinputCallback = procedure do_event();
        XmNexposeCallback = procedure do_expose();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode_toggle_toggle : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Toggle");
        XmNwidth = 75;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_mode_toggle_toggle);
        XmNvalueChangedCallback = procedure do_mode_toggle();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode_toggle_pick : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Pick");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_mode_toggle_pick);
        XmNvalueChangedCallback = procedure do_mode_pick();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode_toggle_erase : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Erase");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_mode_toggle_erase);
        XmNvalueChangedCallback = procedure do_mode_erase();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode_toggle_restore : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Restore");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setting_mode_toggle_restore);
        XmNvalueChangedCallback = procedure do_mode_restore();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode : XmRowColumn widget {
    arguments {
        arguments Style_use;
        XmNnumColumns = 1;
        XmNpacking = XmPACK_TIGHT;
        XmNradioBehavior = true;
        XmNspacing = 0;
        XmNorientation = XmHORIZONTAL;
        XmNx = 70;
        XmNy = 110;
        XmNwidth = 289;
        XmNheight = 34;
    };
    controls {
         managed XmToggleButton setting_mode_toggle_toggle;
         managed XmToggleButton setting_mode_toggle_pick;
         managed XmToggleButton setting_mode_toggle_erase;
         managed XmToggleButton setting_mode_toggle_restore;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object setting_mode_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Mode:");
        XmNmarginWidth = 0;
        XmNx = 20;
        XmNy = 110;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_max_step_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20");
        XmNrecomputeSize = false;
        XmNx = 960;
        XmNy = 80;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_max_step_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_step : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 5;
        XmNmaximum = 20;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 670;
        XmNy = 70;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_step);
        XmNvalueChangedCallback = procedure do_number_step();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_step_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Pings to step:  1");
        XmNx = 550;
        XmNy = 80;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_step_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_num_pings_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20");
        XmNrecomputeSize = false;
        XmNx = 960;
        XmNy = 40;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_num_pings_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_pings : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 10;
        XmNmaximum = 20;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 670;
        XmNy = 30;
        XmNwidth = 290;
        XmNheight = 30;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_pings);
        XmNvalueChangedCallback = procedure do_number_pings();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_number_pings_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Pings shown:   1");
        XmNx = 550;
        XmNy = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_number_pings_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_y_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20.00");
        XmNrecomputeSize = false;
        XmNx = 470;
        XmNy = 80;
        XmNwidth = 65;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_y_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_y : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNdecimalPoints = 2;
        XmNvalue = 100;
        XmNmaximum = 2000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 210;
        XmNy = 70;
        XmNwidth = 260;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_y);
        XmNvalueChangedCallback = procedure do_scale_y();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_y_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Vertical Exaggeration: 0.01");
        XmNx = 10;
        XmNy = 80;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_y_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_x_max_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("20000");
        XmNrecomputeSize = false;
        XmNx = 470;
        XmNy = 40;
        XmNwidth = 60;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_x_max_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_x : XmScale widget {
    arguments {
        arguments Style_use;
        XmNminimum = 1;
        XmNvalue = 1000;
        XmNmaximum = 20000;
        XmNscaleHeight = 15;
        XmNscaleMultiple = 1;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNx = 210;
        XmNy = 30;
        XmNwidth = 260;
        XmNheight = 31;
    };
    controls {
        Xm_Title {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_x);
        XmNvalueChangedCallback = procedure do_scale_x();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object slider_scale_x_label : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Acrosstrack Width (m):  1");
        XmNx = 10;
        XmNy = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_slider_scale_x_label);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object label_show_flagged : XmLabel widget {
    arguments {
        arguments Style_use;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Show flagged profile:");
        XmNx = 730;
        XmNy = 110;
        XmNwidth = 160;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_show_flagged_on : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("On");
        XmNwidth = 49;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_show_flagged_on);
        XmNvalueChangedCallback = procedure do_show_flagged_on();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object toggleButton_show_flagged_off : XmToggleButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Off");
        XmNwidth = 49;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_toggleButton_show_flagged_off);
        XmNvalueChangedCallback = procedure do_show_flagged_off();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object radioBox_show_flagged : XmRadioBox widget {
    arguments {
        arguments Style_use;
        XmNspacing = 10;
        XmNorientation = XmHORIZONTAL;
        XmNx = 880;
        XmNy = 110;
        XmNwidth = 114;
        XmNheight = 34;
    };
    controls {
         managed XmToggleButton toggleButton_show_flagged_on;
         managed XmToggleButton toggleButton_show_flagged_off;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_quit : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Quit");
        XmNx = 790;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_quit();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_reverse : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Reverse");
        XmNx = 660;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_reverse();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_forward : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Forward");
        XmNx = 520;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_forward();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_done : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Done");
        XmNx = 380;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_done();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_next : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Next Buffer");
        XmNx = 250;
        XmNy = 0;
        XmNwidth = 90;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_next_buffer();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_file : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("File");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton_file);
       XmNactivateCallback = procedures {
                 do_fileselection_init();
                 BxManageCB("bulletinBoard_file");
        };
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_about : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("About");
        XmNx = 930;
        XmNy = 0;
        XmNwidth = 80;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_about");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_goto : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Go To Specified Time...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_goto");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_buffer : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Buffer Controls...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_buffer");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_annotation : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Annotation...");
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure BxManageCB("bulletinBoard_annotation");
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pulldownMenu_controls : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 169;
        XmNheight = 76;
    };
    controls {
         managed XmPushButton pushButton_goto;
         managed XmPushButton pushButton_buffer;
         managed XmPushButton pushButton_annotation;
    };
    callbacks {
    };
};

object cascadeButton_controls : XmCascadeButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Controls");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 77;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu_controls;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object menuBar_controls : XmMenuBar widget {
    arguments {
        XmNx = 120;
        XmNy = 0;
        XmNwidth = 87;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton cascadeButton_controls;
    };
    callbacks {
    };
};

object pushButton_unflag_view : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unflag View");
        XmNx = 410;
        XmNy = 110;
        XmNwidth = 110;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_unflag_view();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object pushButton_unflag_all : XmPushButton widget {
    arguments {
        arguments Style_use;
        XmNlabelString = compound_string("Unflag All");
        XmNx = 530;
        XmNy = 110;
        XmNwidth = 110;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks Style_useReasons;
        XmNactivateCallback = procedure do_unflag_all();
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object controls_mbedit : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 1040;
        XmNheight = 150;
    };
    controls {
         managed XmPushButton pushButton_unflag_all;
         managed XmPushButton pushButton_unflag_view;
         managed XmMenuBar menuBar_controls;
         managed XmPushButton pushButton_about;
         managed XmPushButton pushButton_file;
         managed XmPushButton pushButton_next;
         managed XmPushButton pushButton_done;
         managed XmPushButton pushButton_forward;
         managed XmPushButton pushButton_reverse;
         managed XmPushButton pushButton_quit;
         managed XmRadioBox radioBox_show_flagged;
         managed XmLabel label_show_flagged;
         managed XmLabel slider_scale_x_label;
         managed XmScale slider_scale_x;
         managed XmLabel slider_scale_x_max_label;
         managed XmLabel slider_scale_y_label;
         managed XmScale slider_scale_y;
         managed XmLabel slider_scale_y_max_label;
         managed XmLabel slider_number_pings_label;
         managed XmScale slider_number_pings;
         managed XmLabel slider_num_pings_max_label;
         managed XmLabel slider_number_step_label;
         managed XmScale slider_number_step;
         managed XmLabel slider_number_max_step_label;
         managed XmLabel setting_mode_label;
         managed XmRowColumn setting_mode;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object mbedit_bboard : XmBulletinBoard widget {
    arguments {
        arguments Style_use;
        XmNnoResize = false;
        XmNmarginHeight = 0;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_ANY;
        XmNwidth = 1014;
        XmNheight = 665;
    };
    controls {
         managed XmBulletinBoard controls_mbedit;
         managed XmDrawingArea canvas_mbedit;
    };
    callbacks {
        callbacks Style_useReasons;
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

object window_mbedit : XmMainWindow widget {
    arguments {
        arguments Style_use;
        XmNx = 180;
        XmNy = 124;
        XmNwidth = 1014;
        XmNheight = 665;
    };
    controls {
        Xm_Separator1 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator2 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
        Xm_Separator3 {
            arguments {
                arguments Style_use;
            };
            callbacks {
                    callbacks Style_useReasons;
            };
!(BX)            handlers {
!(BX)                handlers Style_useHandlers;
!(BX)            };
        };
!(BX)         unmanaged XmDialogShell dialogShell_annotation;
!(BX)         unmanaged XmDialogShell dialogShell_buffer;
!(BX)         unmanaged XmDialogShell xmDialogShell_error;
!(BX)         unmanaged XmDialogShell xmDialogShell_editsave;
!(BX)         unmanaged XmDialogShell xmDialogShell_message;
!(BX)         unmanaged XmDialogShell xmDialogShell_about;
!(BX)         unmanaged XmDialogShell xmDialogShell_goto;
!(BX)         unmanaged XmDialogShell xmDialogShell_file;
         managed XmBulletinBoard mbedit_bboard;
    };
    callbacks {
        callbacks Style_useReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_window_mbedit);
    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments Style_use;
!(BX)        XmNtitle = "MBedit";
!(BX)        XmNiconName = "MBedit";
!(BX)        XmNallowShellResize = false;
!(BX)        XmNdeleteResponse = XmDESTROY;
!(BX)        XmNx = 180;
!(BX)        XmNy = 124;
!(BX)        XmNwidth = 1014;
!(BX)        XmNheight = 665;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow window_mbedit;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks Style_useReasons;
!(BX)        XmNdestroyCallback = procedure do_quit();
!(BX)    };
!(BX)    handlers {
!(BX)        handlers Style_useHandlers;
!(BX)    };
!(BX)};
end module;
